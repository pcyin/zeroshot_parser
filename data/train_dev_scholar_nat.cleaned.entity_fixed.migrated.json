{"nl": "papers that are coauthored by authorname0 and authorname1", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.noah_smith", "authorname1": "fb:en.author.chris_dyer"}, "idx": "train_scholar_nat-0", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "papers written by authorname0 and authorname1", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.noah_smith", "authorname1": "fb:en.author.chris_dyer"}, "idx": "train_scholar_nat-1", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "what are the papers that have authorname0 and authorname1 as co-authors", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.noah_smith", "authorname1": "fb:en.author.chris_dyer"}, "idx": "train_scholar_nat-2", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "What papers have authorname0 and authorname1 written ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.richard_ladner", "authorname1": "fb:en.author.linda_shapiro"}, "idx": "train_scholar_nat-3", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "what paper did authorname0 and authorname1 write together ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.ras_bodik", "authorname1": "fb:en.author.ameet_soni"}, "idx": "train_scholar_nat-4", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "Has authorname0 and authorname1 written a paper together ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.frank_keller", "authorname1": "fb:en.author.mirella_lapata"}, "idx": "train_scholar_nat-5", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "Papers by authorname0 and authorname1", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.frank_keller", "authorname1": "fb:en.author.mirella_lapata"}, "idx": "train_scholar_nat-6", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "papers by authors authorname0 and authorname1", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.richard_ladner", "authorname1": "fb:en.author.linda_shapiro"}, "idx": "train_scholar_nat-7", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "What papers were written by authors authorname0 and authorname1", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.richard_ladner", "authorname1": "fb:en.author.linda_shapiro"}, "idx": "train_scholar_nat-8", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "papers by authorname0 and authorname1", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.richard_ladner", "authorname1": "fb:en.author.linda_shapiro"}, "idx": "train_scholar_nat-9", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "Does authorname0 ever collaborated with authorname1 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.noah_smith", "authorname1": "fb:en.author.chris_dyer"}, "idx": "train_scholar_nat-10", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "Which papers have authorname0 and authorname1 as co-authors ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.x_jiang", "authorname1": "fb:en.author.frantzen"}, "idx": "train_scholar_nat-11", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "papers coauthored by authorname0 and authorname1", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.x_jiang", "authorname1": "fb:en.author.frantzen"}, "idx": "train_scholar_nat-12", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "What papers have been written by authorname0 and authorname1 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.peter_mertens", "authorname1": "fb:en.author.dina_barbian"}, "idx": "train_scholar_nat-13", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "who has written the most keyphrasename0 papers ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "author that writes the most number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.information_retrieval"}, "idx": "train_scholar_nat-14", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "who is the most published author in keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "author that writes the most number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-15", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "who has the most publications in keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "author that writes the most number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.question_answering"}, "idx": "train_scholar_nat-16", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "who has written the most papers on keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "author that writes the most number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.syntactic_parsing"}, "idx": "train_scholar_nat-17", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "List prominent scholars in keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "author that writes the most number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.theoretical"}, "idx": "train_scholar_nat-18", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "Who are the authors with the most published papers in keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "author that writes the most number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.sigmod"}, "idx": "train_scholar_nat-19", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "top keyphrasename0 author", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "author that writes the most number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.syntactic_parsing"}, "idx": "train_scholar_nat-20", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "top author in keyphrasename0", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "author that writes the most number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.syntactic_parsing"}, "idx": "train_scholar_nat-21", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "who published the most in keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "author that writes the most number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.syntactic_parsing"}, "idx": "train_scholar_nat-22", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "How many citation authorname0 has ?", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )", "can": "citation count of noah smith", "variables": {"authorname0": "fb:en.author.richard_anderson"}, "idx": "train_scholar_nat-23", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )"}
{"nl": "authorname0 citation count", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )", "can": "citation count of noah smith", "variables": {"authorname0": "fb:en.author.chris_dyer"}, "idx": "train_scholar_nat-24", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )"}
{"nl": "how many citations does authorname0 have ?", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )", "can": "citation count of noah smith", "variables": {"authorname0": "fb:en.author.donald_e_knuth"}, "idx": "train_scholar_nat-25", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )"}
{"nl": "how many citations does authorname0 have ?", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )", "can": "citation count of noah smith", "variables": {"authorname0": "fb:en.author.mark_steedman"}, "idx": "train_scholar_nat-26", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )"}
{"nl": "How many citations does authorname0 have ?", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )", "can": "citation count of noah smith", "variables": {"authorname0": "fb:en.author.michael_i--_jordan"}, "idx": "train_scholar_nat-27", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )"}
{"nl": "How many citations does authorname0 have ?", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )", "can": "citation count of noah smith", "variables": {"authorname0": "fb:en.author.fahad_pervaiz"}, "idx": "train_scholar_nat-28", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )"}
{"nl": "How many times was authorname0 cited ?", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )", "can": "citation count of noah smith", "variables": {"authorname0": "fb:en.author.alex_snoeren"}, "idx": "train_scholar_nat-29", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )"}
{"nl": "How many citations does authorname0 have ?", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )", "can": "citation count of noah smith", "variables": {"authorname0": "fb:en.author.christopher_d_manning"}, "idx": "train_scholar_nat-30", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )"}
{"nl": "How many citations does authorname0 has ?", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )", "can": "citation count of noah smith", "variables": {"authorname0": "fb:en.author.yann_lecun"}, "idx": "train_scholar_nat-31", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )"}
{"nl": "venuename0 papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose venue is nature", "variables": {"venuename0": "fb:en.venue.brain_research"}, "idx": "train_scholar_nat-32", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) )"}
{"nl": "papers at venuename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose venue is nature", "variables": {"venuename0": "fb:en.venue.pldi"}, "idx": "train_scholar_nat-33", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) )"}
{"nl": "papers in venuename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose venue is nature", "variables": {"venuename0": "fb:en.venue.neural_networks"}, "idx": "train_scholar_nat-34", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) )"}
{"nl": "venuename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose venue is nature", "variables": {"venuename0": "fb:en.venue.ictd"}, "idx": "train_scholar_nat-35", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) )"}
{"nl": "Papers about venuename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose venue is nature", "variables": {"venuename0": "fb:en.venue.robotics"}, "idx": "train_scholar_nat-36", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) )"}
{"nl": "Show me venuename0 papers .", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose venue is nature", "variables": {"venuename0": "fb:en.venue.ieee_visualization"}, "idx": "train_scholar_nat-37", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) )"}
{"nl": "what papers did venuename0 publish ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose venue is nature", "variables": {"venuename0": "fb:en.venue.nips"}, "idx": "train_scholar_nat-38", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) )"}
{"nl": "Has authorname0 written any papers in year0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.mirella_lapata", "year0": "2016"}, "idx": "train_scholar_nat-39", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "What papers has authorname0 written ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.yoav_artzi"}, "idx": "train_scholar_nat-40", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What papers has written by authorname0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.dan_suciu"}, "idx": "train_scholar_nat-41", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What papers has authorname0 written ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.luke_s_zettlemoyer"}, "idx": "train_scholar_nat-42", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.chris_dyer"}, "idx": "train_scholar_nat-43", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What papers has authorname0 written ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.dan_suciu"}, "idx": "train_scholar_nat-44", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "authorname0 papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.hal_perkins"}, "idx": "train_scholar_nat-45", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "Papers by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.bevan_jones"}, "idx": "train_scholar_nat-46", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "Papers written by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.daniel_a--_epstein"}, "idx": "train_scholar_nat-47", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.torlak"}, "idx": "train_scholar_nat-48", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.luke_zettlemoyer"}, "idx": "train_scholar_nat-49", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.stefan_savage"}, "idx": "train_scholar_nat-50", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "which papers has authorname0 written ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.mirella_lapata"}, "idx": "train_scholar_nat-51", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.luke_zettlemoyer"}, "idx": "train_scholar_nat-52", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.oren_etzioni"}, "idx": "train_scholar_nat-53", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers written by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.srinivasan_iyer"}, "idx": "train_scholar_nat-54", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.mayank_goel"}, "idx": "train_scholar_nat-55", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What has authorname0 published ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.ras_bodik"}, "idx": "train_scholar_nat-56", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers written by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.oren_etzioni"}, "idx": "train_scholar_nat-57", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.noah_smith"}, "idx": "train_scholar_nat-58", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What papers has authorname0 written ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.adam_chlipala"}, "idx": "train_scholar_nat-59", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.ashutosh_saxena"}, "idx": "train_scholar_nat-60", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "Does authorname0 have any papers published ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.hal_perkins"}, "idx": "train_scholar_nat-61", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "authorname0 's papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.oren_etzioni"}, "idx": "train_scholar_nat-62", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.oren_etzioni"}, "idx": "train_scholar_nat-63", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What papers has authorname0 written ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.mirella_lapata"}, "idx": "train_scholar_nat-64", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What was authorname0 's latest paper ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper that noah smith writes and that has the largest publication year", "variables": {"authorname0": "fb:en.author.richard_anderson"}, "idx": "train_scholar_nat-65", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "What was authorname0 's latest paper ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper that noah smith writes and that has the largest publication year", "variables": {"authorname0": "fb:en.author.richard_anderson"}, "idx": "train_scholar_nat-66", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "Latest paper by authorname0", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper that noah smith writes and that has the largest publication year", "variables": {"authorname0": "fb:en.author.jeff_dean"}, "idx": "train_scholar_nat-67", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "What is the latest paper by authorname0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper that noah smith writes and that has the largest publication year", "variables": {"authorname0": "fb:en.author.emanuel_todorov"}, "idx": "train_scholar_nat-68", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "What is authorname0 's latest paper ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper that noah smith writes and that has the largest publication year", "variables": {"authorname0": "fb:en.author.magda_balazinska"}, "idx": "train_scholar_nat-69", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "What is authorname0 's latest paper ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper that noah smith writes and that has the largest publication year", "variables": {"authorname0": "fb:en.author.kyunghyun_cho"}, "idx": "train_scholar_nat-70", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "What is authorname0 's latest paper ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper that noah smith writes and that has the largest publication year", "variables": {"authorname0": "fb:en.author.ang_li"}, "idx": "train_scholar_nat-71", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "are there any keyphrasename0 papers since year0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) )", "can": "paper whose keyphrase is semantic parsing and whose publication year is larger than 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.monte_carlo_simulation", "year0": "2011"}, "idx": "train_scholar_nat-72", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "keyphrasename0 papers later than year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) )", "can": "paper whose keyphrase is semantic parsing and whose publication year is larger than 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing", "year0": "2010"}, "idx": "train_scholar_nat-73", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "keyphrasename0 later than year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) )", "can": "paper whose keyphrase is semantic parsing and whose publication year is larger than 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.mitochondrial_biogenesis", "year0": "1990"}, "idx": "train_scholar_nat-74", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "keyphrasename0 papers published after year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) )", "can": "paper whose keyphrase is semantic parsing and whose publication year is larger than 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.monte_carlo_simulation", "year0": "2011"}, "idx": "train_scholar_nat-75", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "keyphrasename0 papers since year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) )", "can": "paper whose keyphrase is semantic parsing and whose publication year is larger than 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.monte_carlo_simulation", "year0": "2011"}, "idx": "train_scholar_nat-76", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "does authorname0 publish a lot ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.ras_bodik"}, "idx": "train_scholar_nat-77", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers did authorname0 publish at venuename0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )", "can": "number of paper that noah smith writes and whose venue is nature", "variables": {"authorname0": "fb:en.author.jeffrey_heer", "venuename0": "fb:en.venue.chi"}, "idx": "train_scholar_nat-78", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have in venuename0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )", "can": "number of paper that noah smith writes and whose venue is nature", "variables": {"authorname0": "fb:en.author.jeffrey_heer", "venuename0": "fb:en.venue.chi"}, "idx": "train_scholar_nat-79", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers has authorname0 published in venuename0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )", "can": "number of paper that noah smith writes and whose venue is nature", "variables": {"authorname0": "fb:en.author.david_blei", "venuename0": "fb:en.venue.nips"}, "idx": "train_scholar_nat-80", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have in venuename0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )", "can": "number of paper that noah smith writes and whose venue is nature", "variables": {"authorname0": "fb:en.author.james_fogarty", "venuename0": "fb:en.venue.uist"}, "idx": "train_scholar_nat-81", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "how many papers does authorname0 have at venuename0", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )", "can": "number of paper that noah smith writes and whose venue is nature", "variables": {"authorname0": "fb:en.author.nicola_dell", "venuename0": "fb:en.venue.chi"}, "idx": "train_scholar_nat-82", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "how many papers does authorname0 have in venuename0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )", "can": "number of paper that noah smith writes and whose venue is nature", "variables": {"authorname0": "fb:en.author.dan_klein", "venuename0": "fb:en.venue.emnlp"}, "idx": "train_scholar_nat-83", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have in venuename0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )", "can": "number of paper that noah smith writes and whose venue is nature", "variables": {"authorname0": "fb:en.author.james_fogarty", "venuename0": "fb:en.venue.chi"}, "idx": "train_scholar_nat-84", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "how many authorname0 papers are in venuename0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )", "can": "number of paper that noah smith writes and whose venue is nature", "variables": {"authorname0": "fb:en.author.ras_bodik", "venuename0": "fb:en.venue.popl"}, "idx": "train_scholar_nat-85", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have in venuename0", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )", "can": "number of paper that noah smith writes and whose venue is nature", "variables": {"authorname0": "fb:en.author.graham_neubig", "venuename0": "fb:en.venue.tacl"}, "idx": "train_scholar_nat-86", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have in venuename0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )", "can": "number of paper that noah smith writes and whose venue is nature", "variables": {"authorname0": "fb:en.author.graham_neubig", "venuename0": "fb:en.venue.tacl"}, "idx": "train_scholar_nat-87", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "List all academic papers on title0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string title_paper_title ) ( string = ) title0 ) )", "can": "paper whose title is neural attention", "variables": {"title0": "fb:en.title.unsupervised_cross-domain_word_representation_learning"}, "idx": "train_scholar_nat-88", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string title_paper_title ) ( string = ) title0 ) )"}
{"nl": "which venuename0 year0 papers have the most citations ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose venue is nature and whose publication year is 2012 and that has the largest citation count", "variables": {"year0": "2010", "venuename0": "fb:en.venue.emnlp"}, "idx": "train_scholar_nat-89", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "Which paper from venuename0 year0 was cited most ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose venue is nature and whose publication year is 2012 and that has the largest citation count", "variables": {"year0": "2015", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-90", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "which venuename0 year0 papers have been cited the most ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose venue is nature and whose publication year is 2012 and that has the largest citation count", "variables": {"year0": "2010", "venuename0": "fb:en.venue.emnlp"}, "idx": "train_scholar_nat-91", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "What papers were published at venuename0 in year0 about title0 applied to datasetname0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string title_paper_title ) ( string = ) title0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose title is neural attention and whose venue is nature and whose dataset is reviews and whose publication year is 2012", "variables": {"datasetname0": "fb:en.dataset.rgb-d_object_dataset", "title0": "fb:en.title.class_consistent_multi-modal_fusion_with_binary_features", "year0": "2016", "venuename0": "fb:en.venue.cvpr"}, "idx": "train_scholar_nat-92", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string title_paper_title ) ( string = ) title0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )"}
{"nl": "What papers were published at venuename0 '16 about title0 applied to datasetname0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string title_paper_title ) ( string = ) title0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose title is neural attention and whose venue is nature and whose dataset is reviews and whose publication year is 2012", "variables": {"datasetname0": "fb:en.dataset.rgb-d_object_dataset", "title0": "fb:en.title.class_consistent_multi-modal_fusion_with_binary_features", "year0": "2016", "venuename0": "fb:en.venue.cvpr"}, "idx": "train_scholar_nat-93", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string title_paper_title ) ( string = ) title0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )"}
{"nl": "How many papers are in keyphrasename0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.nlp"}, "idx": "train_scholar_nat-94", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "How many papers are about keyphrasename0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning"}, "idx": "train_scholar_nat-95", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "how many papers about keyphrasename0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.program_slicing"}, "idx": "train_scholar_nat-96", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "How many papers has authorname0 written ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.omer_lev"}, "idx": "train_scholar_nat-97", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.srinivasan_iyer"}, "idx": "train_scholar_nat-98", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.jeffrey_heer"}, "idx": "train_scholar_nat-99", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers has authorname0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.jeffrey_heer"}, "idx": "train_scholar_nat-100", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers has authorname0 published ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.christopher_d--_manning"}, "idx": "train_scholar_nat-101", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers has authorname0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.jeffrey_heer"}, "idx": "train_scholar_nat-102", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "how many papers has authorname0 written ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.mirella_lapata"}, "idx": "train_scholar_nat-103", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.stefan_savage"}, "idx": "train_scholar_nat-104", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "Has authorname0 published any papers ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.dan_suciu"}, "idx": "train_scholar_nat-105", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "how many papers has authorname0 published ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.ameet_soni"}, "idx": "train_scholar_nat-106", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers has authorname0 published ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.luke_zettlemoyer"}, "idx": "train_scholar_nat-107", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.kentaro_toyama"}, "idx": "train_scholar_nat-108", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.robert_wood"}, "idx": "train_scholar_nat-109", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "how many papers does authorname0 have ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.fahad_pervaiz"}, "idx": "train_scholar_nat-110", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "how many papers has authorname0 published ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.mangpo"}, "idx": "train_scholar_nat-111", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "how many papers has authorname0 published ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.jeff_dean"}, "idx": "train_scholar_nat-112", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers has authorname0 written ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.dominik_moritz"}, "idx": "train_scholar_nat-113", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "number of papers written by authorname0", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.lorenzo_bruzzone"}, "idx": "train_scholar_nat-114", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers has authorname0 written ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.ras_bodik"}, "idx": "train_scholar_nat-115", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.james_fogarty"}, "idx": "train_scholar_nat-116", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers has authorname0 published ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.chris_mattmann"}, "idx": "train_scholar_nat-117", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.emily_m_bender"}, "idx": "train_scholar_nat-118", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.andrew_king"}, "idx": "train_scholar_nat-119", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers has authorname0 published ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.christopher_d_manning"}, "idx": "train_scholar_nat-120", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "what kind of papers does authorname0 publish", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.shwetak_patel"}, "idx": "train_scholar_nat-121", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "Keyphrases used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.jeffrey_heer"}, "idx": "train_scholar_nat-122", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "Keyphrases used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.james_fogarty"}, "idx": "train_scholar_nat-123", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "What keywords are in papers by authorname0 ?", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.noah_smith"}, "idx": "train_scholar_nat-124", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keywords used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.noah_smith"}, "idx": "train_scholar_nat-125", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "what keywords are used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.shwetak_patel"}, "idx": "train_scholar_nat-126", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keyphrases used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.dan_weld"}, "idx": "train_scholar_nat-127", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keyphrases used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.roni_rosenfeld"}, "idx": "train_scholar_nat-128", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keyphrases used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.yejin_choi"}, "idx": "train_scholar_nat-129", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keyphrases used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.dan_weld"}, "idx": "train_scholar_nat-130", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keyphrases used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.noah_smith"}, "idx": "train_scholar_nat-131", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keyphrases used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.magdalena_balazinska"}, "idx": "train_scholar_nat-132", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keyphrases used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.ang_li"}, "idx": "train_scholar_nat-133", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keyphrases used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.dan_suciu"}, "idx": "train_scholar_nat-134", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keyphrases used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.kaiming_he"}, "idx": "train_scholar_nat-135", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keyphrases used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.magda_balazinska"}, "idx": "train_scholar_nat-136", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keyphrases used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.luke_s_zettlemoyer"}, "idx": "train_scholar_nat-137", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "what topics does authorname0 publish in", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.luke_zettlemoyer"}, "idx": "train_scholar_nat-138", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keyphrases used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.luke_zettlemoyer"}, "idx": "train_scholar_nat-139", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keywords in the papers written by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.lorenzo_bruzzone"}, "idx": "train_scholar_nat-140", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keyphrases used by authorname0 .", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.jeffrey_heer"}, "idx": "train_scholar_nat-141", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keywords used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.luke_zettlemoyer"}, "idx": "train_scholar_nat-142", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "keyphrases used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.mirella_lapata"}, "idx": "train_scholar_nat-143", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "What conference does authorname0 publish in ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.li_dong"}, "idx": "train_scholar_nat-144", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "conferences that authorname0 has published in", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.chris_dyer"}, "idx": "train_scholar_nat-145", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "What conferences does authorname0 publish in ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.noah_a--_smith"}, "idx": "train_scholar_nat-146", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "How many papers are there ?", "lf": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ) )", "can": "number of paper", "variables": {}, "idx": "train_scholar_nat-147", "canonical_lf": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ) )"}
{"nl": "How many papers by authorname0 contain the keyphrases keyphrasename0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "number of paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.luke_zettlemoyer", "keyphrasename0": "fb:en.keyphrase.learning_algorithm"}, "idx": "train_scholar_nat-148", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have in keyphrasename0 area ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "number of paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.alvin_c_haver", "keyphrasename0": "fb:en.keyphrase.iv_infusion"}, "idx": "train_scholar_nat-149", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many paper has authorname0 written about keyphrasename0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "number of paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.ed_desmond", "keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-150", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "What conferences did authorname0 submit to in year0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.yejin_kim", "year0": "2015"}, "idx": "train_scholar_nat-151", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "Where did authorname0 publish in year0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.chris_dyer", "year0": "2014"}, "idx": "train_scholar_nat-152", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "What conferences did authorname0 publish in in year0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.noah_a--_smith", "year0": "2016"}, "idx": "train_scholar_nat-153", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "Where did authorname0 publish in year0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.li_dong", "year0": "2016"}, "idx": "train_scholar_nat-154", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "what are most cited papers of authorname0 and authorname1 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname1 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper that noah smith writes and that richard anderson writes and that has the largest citation count", "variables": {"authorname0": "fb:en.author.tom_mitchell", "authorname1": "fb:en.author.oren_etzioni"}, "idx": "train_scholar_nat-155", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname1 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "what are the most cited papers by authorname0 and authorname1 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname1 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper that noah smith writes and that richard anderson writes and that has the largest citation count", "variables": {"authorname0": "fb:en.author.tom_mitchell", "authorname1": "fb:en.author.oren_etzioni"}, "idx": "train_scholar_nat-156", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname1 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "venuename0 papers in year0 on keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.parsing", "year0": "2012", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-157", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "What papers were published in venuename0 in year0 about keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing", "year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-158", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers on keyphrasename0 appeared at venuename0 last year", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing", "year0": "2016", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-159", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "keyphrasename0 papers from venuename0 year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.parsing", "year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-160", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers about keyphrasename0 in venuename0 year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.crowdsourcing", "year0": "2015", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-161", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "venuename0 papers in year0 on keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.parsing", "year0": "2012", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-162", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers about keyphrasename0 in venuename0 year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.machine_translation", "year0": "2014", "venuename0": "fb:en.venue.emnlp"}, "idx": "train_scholar_nat-163", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "venuename0 papers in year0 on keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.parsing", "year0": "2012", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-164", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "venuename0 papers in year0 in keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning", "year0": "2016", "venuename0": "fb:en.venue.icml"}, "idx": "train_scholar_nat-165", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "venuename0 papers in year0 about keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing", "year0": "2016", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-166", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "What papers were published at venuename0 in year0 were about keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_segmentation", "year0": "2015", "venuename0": "fb:en.venue.cvpr"}, "idx": "train_scholar_nat-167", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers on keyphrasename0 appeared at venuename0 in year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing", "year0": "2016", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-168", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "how many keyphrasename0 papers did venuename0 year0 have ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.parsing", "year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-169", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "who published keyphrasename0 papers at venuename0 year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning", "year0": "2016", "venuename0": "fb:en.venue.icml"}, "idx": "train_scholar_nat-170", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "which papers in venuename0 year0 had keyphrasename0 in them ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.lasso", "year0": "2014", "venuename0": "fb:en.venue.icml"}, "idx": "train_scholar_nat-171", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "what were some keyphrasename0 based papers in venuename0 year0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning", "year0": "2016", "venuename0": "fb:en.venue.nips"}, "idx": "train_scholar_nat-172", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "what are the most popular datasets used in keyphrasename0", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "dataset that is dataset of the most number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.structured_prediction"}, "idx": "train_scholar_nat-173", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "List the popular publications on keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.object_discrimination"}, "idx": "train_scholar_nat-174", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "Which paper should I read about keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.dependent_type"}, "idx": "train_scholar_nat-175", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "top keyphrasename0 papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.reinforcement_learning"}, "idx": "train_scholar_nat-176", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "List papers that has a keyword keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.depth_map"}, "idx": "train_scholar_nat-177", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "keyphrasename0 research papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.facial_expression"}, "idx": "train_scholar_nat-178", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers on keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.textual_entailment"}, "idx": "train_scholar_nat-179", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers related to keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning"}, "idx": "train_scholar_nat-180", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers about keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.object_recognition"}, "idx": "train_scholar_nat-181", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers about keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-182", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "Papers about keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-183", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers about keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning"}, "idx": "train_scholar_nat-184", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers published in the area of keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.machine_translation"}, "idx": "train_scholar_nat-185", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "keyphrasename0 experiments", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.autoencoder"}, "idx": "train_scholar_nat-186", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "Show me the papers on keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.data_cleaning"}, "idx": "train_scholar_nat-187", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers that used keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.mnist"}, "idx": "train_scholar_nat-188", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers that mention keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.autoencoder"}, "idx": "train_scholar_nat-189", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers related to keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.sensor_fusion"}, "idx": "train_scholar_nat-190", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "keyphrasename0 papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.computer_model"}, "idx": "train_scholar_nat-191", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers on keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-192", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "Show me keyphrasename0 papers .", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning"}, "idx": "train_scholar_nat-193", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "keyphrasename0 publications", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.information_extraction"}, "idx": "train_scholar_nat-194", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "Fetch me some papers on keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.artificial_neural_network"}, "idx": "train_scholar_nat-195", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers on keyphrasename0 experiments", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-196", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "What has authorname0 published in the last misc0 years ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) )", "can": "paper that noah smith writes and whose publication year is larger than 2012", "variables": {"authorname0": "fb:en.author.luke_s_zettlemoyer", "misc0": "8"}, "idx": "train_scholar_nat-197", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) )"}
{"nl": "most recent research interests of authorname0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) ( string keyphrase_paper_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes and that has the largest publication year", "variables": {"authorname0": "fb:en.author.michael_jordan"}, "idx": "train_scholar_nat-198", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) ( string keyphrase_paper_keyphrase ) ) )"}
{"nl": "most recent papers by authorname0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) ( string keyphrase_paper_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes and that has the largest publication year", "variables": {"authorname0": "fb:en.author.percy_liang"}, "idx": "train_scholar_nat-199", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) ( string keyphrase_paper_keyphrase ) ) )"}
{"nl": "most recent papers written by authorname0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) ( string keyphrase_paper_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes and that has the largest publication year", "variables": {"authorname0": "fb:en.author.sanjeev_arora"}, "idx": "train_scholar_nat-200", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) ( string keyphrase_paper_keyphrase ) ) )"}
{"nl": "authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.fahad_pervaiz"}, "idx": "train_scholar_nat-201", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "list papers by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.agha_ali_raza"}, "idx": "train_scholar_nat-202", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "List of papers by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.samia_razaq"}, "idx": "train_scholar_nat-203", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "conference papers of authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.subhasis_chaudhuri"}, "idx": "train_scholar_nat-204", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "how many keyphrasename0 papers in venuename0 year0", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing", "year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-205", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "how many keyphrasename0 papers appeared in the proceeeding of venuename0 year0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.parsing", "year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-206", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "authorname0 keyphrasename0 paper", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.li_dong", "keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-207", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers by authorname0 about keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.li_dong", "keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-208", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "authorname0 's paper about keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.li_dong", "keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-209", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What are the papers of authorname0 in keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.percy_liang", "keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-210", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "I want the papers on keyphrasename0 by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.philipp_koehn", "keyphrasename0": "fb:en.keyphrase.machine_translation"}, "idx": "train_scholar_nat-211", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "keyphrasename0 papers by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.li_dong", "keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-212", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What papers has authorname0 written on keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.graham_neubig", "keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-213", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "keyphrasename0 paper by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.li_dong", "keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-214", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "Does authorname0 do keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.brian_curless", "keyphrasename0": "fb:en.keyphrase.convolution"}, "idx": "train_scholar_nat-215", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What papers has authorname0 written in year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.li_dong", "year0": "2016"}, "idx": "train_scholar_nat-216", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers by authorname0 in year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.linda_shapiro", "year0": "2016"}, "idx": "train_scholar_nat-217", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What did authorname0 published in year0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.luke_s_zettlemoyer", "year0": "2009"}, "idx": "train_scholar_nat-218", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "Papers written by authorname0 in year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.daniel_a--_epstein", "year0": "2016"}, "idx": "train_scholar_nat-219", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What are the papers of authorname0 in year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.ali_farhadi", "year0": "2014"}, "idx": "train_scholar_nat-220", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "authorname0 's papers in year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.ali_farhadi", "year0": "2015"}, "idx": "train_scholar_nat-221", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "Papers authored by authorname0 in year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.daniel_s--_weld", "year0": "2011"}, "idx": "train_scholar_nat-222", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "Papers from authorname0 in year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.dan_klein", "year0": "2013"}, "idx": "train_scholar_nat-223", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What keyphrasename0 paper published in venuename0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature", "variables": {"keyphrasename0": "fb:en.keyphrase.data_cleaning", "venuename0": "fb:en.venue.vldb"}, "idx": "train_scholar_nat-224", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "List the papers on keyphrasename0 that were published in venuename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature", "variables": {"keyphrasename0": "fb:en.keyphrase.data_cleaning", "venuename0": "fb:en.venue.vldb"}, "idx": "train_scholar_nat-225", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "what are the papers in venuename0 about keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature", "variables": {"keyphrasename0": "fb:en.keyphrase.data_mining", "venuename0": "fb:en.venue.ijcai"}, "idx": "train_scholar_nat-226", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "Papers about keyphrasename0 in venuename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature", "variables": {"keyphrasename0": "fb:en.keyphrase.image_annotation", "venuename0": "fb:en.venue.chi"}, "idx": "train_scholar_nat-227", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers at venuename0 related to keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature", "variables": {"keyphrasename0": "fb:en.keyphrase.augmented_reality", "venuename0": "fb:en.venue.chi"}, "idx": "train_scholar_nat-228", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers about keyphrasename0 published at venuename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature", "variables": {"keyphrasename0": "fb:en.keyphrase.program_slicing", "venuename0": "fb:en.venue.pldi"}, "idx": "train_scholar_nat-229", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers on keyphrasename0 venuename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature", "variables": {"keyphrasename0": "fb:en.keyphrase.liquid", "venuename0": "fb:en.venue.automatica"}, "idx": "train_scholar_nat-230", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "keyphrasename0 papers used in venuename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature", "variables": {"keyphrasename0": "fb:en.keyphrase.tail", "venuename0": "fb:en.venue.nips"}, "idx": "train_scholar_nat-231", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "How many co-authors has authorname0 had ?", "lf": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) ) )", "can": "number of author that writes paper that noah smith writes", "variables": {"authorname0": "fb:en.author.mark_steedman"}, "idx": "train_scholar_nat-232", "canonical_lf": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) ) )"}
{"nl": "keyphrases used by authorname0 in year0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.dan_klein", "year0": "2014"}, "idx": "train_scholar_nat-233", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ) )"}
{"nl": "Keyphrases used by authorname0 in year0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.james_fogarty", "year0": "2015"}, "idx": "train_scholar_nat-234", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ) )"}
{"nl": "keyphrases used by authorname0 in year0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.dan_klein", "year0": "2010"}, "idx": "train_scholar_nat-235", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ) )"}
{"nl": "What are keyphrases by authorname0 in year0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.tom_mitchell", "year0": "2012"}, "idx": "train_scholar_nat-236", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ) )"}
{"nl": "what author is most cited ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( string citation_count_author_number ) ) )", "can": "author that has the largest citation count", "variables": {}, "idx": "train_scholar_nat-237", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( string citation_count_author_number ) ) )"}
{"nl": "which papers use datasetname0 or datasetname1 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) ( call SW.concat datasetname0 datasetname1 ) ) )", "can": "paper whose dataset is reviews or blogs", "variables": {"datasetname0": "fb:en.dataset.wordnet", "datasetname1": "fb:en.dataset.dbpedia"}, "idx": "train_scholar_nat-238", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) ( call SW.concat datasetname0 datasetname1 ) ) )"}
{"nl": "papers using datasetname0 and datasetname1", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) ( call SW.concat datasetname0 datasetname1 ) ) )", "can": "paper whose dataset is reviews or blogs", "variables": {"datasetname0": "fb:en.dataset.wordnet", "datasetname1": "fb:en.dataset.dbpedia"}, "idx": "train_scholar_nat-239", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) ( call SW.concat datasetname0 datasetname1 ) ) )"}
{"nl": "papers about datasetname0 and datasetname1", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) ( call SW.concat datasetname0 datasetname1 ) ) )", "can": "paper whose dataset is reviews or blogs", "variables": {"datasetname0": "fb:en.dataset.wordnet", "datasetname1": "fb:en.dataset.dbpedia"}, "idx": "train_scholar_nat-240", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) ( call SW.concat datasetname0 datasetname1 ) ) )"}
{"nl": "journal articles by authorname0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string journal_paper_journal ) ) )", "can": "journal of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.lorenzo_bruzzone"}, "idx": "train_scholar_nat-241", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string journal_paper_journal ) ) )"}
{"nl": "Journal Papers by authorname0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string journal_paper_journal ) ) )", "can": "journal of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.mohammad_rastegari"}, "idx": "train_scholar_nat-242", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string journal_paper_journal ) ) )"}
{"nl": "best paper in venuename0 year0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose venue is nature and whose publication year is 2012 and that has the largest citation count", "variables": {"year0": "2015", "venuename0": "fb:en.venue.emnlp"}, "idx": "train_scholar_nat-243", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "who published at venuename0 year0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )", "can": "author that writes paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-244", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )"}
{"nl": "venuename0 year0 authors", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )", "can": "author that writes paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-245", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )"}
{"nl": "authors of venuename0 year0 papers", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )", "can": "author that writes paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-246", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )"}
{"nl": "List of authors venuename0 year0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )", "can": "author that writes paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2016", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-247", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )"}
{"nl": "authors of venuename0 year0 papers", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )", "can": "author that writes paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-248", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )"}
{"nl": "How many papers were written on keyphrasename0 this year ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose keyphrase is semantic parsing and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.multiuser_receiver_in_the_decision_feedback", "year0": "2016"}, "idx": "train_scholar_nat-249", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "How many papers run experiments on datasetname0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ) )", "can": "number of paper whose dataset is reviews", "variables": {"datasetname0": "fb:en.dataset.imagenet"}, "idx": "train_scholar_nat-250", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ) )"}
{"nl": "How many papers used datasetname0 dataset ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ) )", "can": "number of paper whose dataset is reviews", "variables": {"datasetname0": "fb:en.dataset.imagenet"}, "idx": "train_scholar_nat-251", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ) )"}
{"nl": "How many papers written on datasetname0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ) )", "can": "number of paper whose dataset is reviews", "variables": {"datasetname0": "fb:en.dataset.imagenet"}, "idx": "train_scholar_nat-252", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ) )"}
{"nl": "how many papers are based on datasetname0", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ) )", "can": "number of paper whose dataset is reviews", "variables": {"datasetname0": "fb:en.dataset.imagenet"}, "idx": "train_scholar_nat-253", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ) )"}
{"nl": "How many papers did authorname0 cite ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string cites_author_paper ) ) ( string = ) authorname0 ) ) )", "can": "number of paper that paper that noah smith writes cites", "variables": {"authorname0": "fb:en.author.ali_farhadi"}, "idx": "train_scholar_nat-254", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string cites_author_paper ) ) ( string = ) authorname0 ) ) )"}
{"nl": "how many papers does authorname0 cite", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string cites_author_paper ) ) ( string = ) authorname0 ) ) )", "can": "number of paper that paper that noah smith writes cites", "variables": {"authorname0": "fb:en.author.michael_i--_jordan"}, "idx": "train_scholar_nat-255", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string cites_author_paper ) ) ( string = ) authorname0 ) ) )"}
{"nl": "how many papers has authorname0 cited ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string cites_author_paper ) ) ( string = ) authorname0 ) ) )", "can": "number of paper that paper that noah smith writes cites", "variables": {"authorname0": "fb:en.author.mirella_lapata"}, "idx": "train_scholar_nat-256", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string cites_author_paper ) ) ( string = ) authorname0 ) ) )"}
{"nl": "When does authorname0 publish the first venuename0 paper ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string min ) ( string publication_year_paper_number ) ) ( string publication_year_paper_number ) ) )", "can": "publication year of paper that noah smith writes and whose venue is nature and that has the smallest publication year", "variables": {"authorname0": "fb:en.author.michael_stonebraker", "venuename0": "fb:en.venue.vldb"}, "idx": "train_scholar_nat-257", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string min ) ( string publication_year_paper_number ) ) ( string publication_year_paper_number ) ) )"}
{"nl": "keyphrasename0 dataset", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "dataset of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.knn"}, "idx": "train_scholar_nat-258", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "data sets for keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "dataset of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.textual_entailment"}, "idx": "train_scholar_nat-259", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "list datasets for keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "dataset of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.video_segmentation"}, "idx": "train_scholar_nat-260", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "datasets for keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "dataset of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.knn"}, "idx": "train_scholar_nat-261", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "Datasets with keyphrasename0 information", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "dataset of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-262", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "datasets used by keyphrasename0 papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "dataset of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.textual_entailment"}, "idx": "train_scholar_nat-263", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "datasets for keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "dataset of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.knn"}, "idx": "train_scholar_nat-264", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "datasets in keyphrasename0 papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "dataset of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.knn"}, "idx": "train_scholar_nat-265", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "datasets with keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "dataset of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-266", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "where does authorname0 publish ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.li_dong"}, "idx": "train_scholar_nat-267", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "in what venues does authorname0 publish ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.dan_klein"}, "idx": "train_scholar_nat-268", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "in what venues does authorname0 publish ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.zhengdong_lu"}, "idx": "train_scholar_nat-269", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "how many papers appeared at venuename0 last year", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2015", "venuename0": "fb:en.venue.nips"}, "idx": "train_scholar_nat-270", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "how many papers accepted in venuename0 year0", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2016", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-271", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "How many papers were published in venuename0 in year0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2015", "venuename0": "fb:en.venue.aaai"}, "idx": "train_scholar_nat-272", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "How many papers on venuename0 in year0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2016", "venuename0": "fb:en.venue.computer_science_education"}, "idx": "train_scholar_nat-273", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "how many papers in venuename0 year0", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2016", "venuename0": "fb:en.venue.emnlp"}, "idx": "train_scholar_nat-274", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "How many venuename0 papers did authorname0 written in the last year ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper that noah smith writes and whose venue is nature and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.john_lee", "misc0": "1", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-275", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ) )"}
{"nl": "what was the first keyphrasename0 paper ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string min ) ( string publication_year_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the smallest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning"}, "idx": "train_scholar_nat-276", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string min ) ( string publication_year_paper_number ) ) )"}
{"nl": "what year was the first keyphrasename0 paper published ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string min ) ( string publication_year_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the smallest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning"}, "idx": "train_scholar_nat-277", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string min ) ( string publication_year_paper_number ) ) )"}
{"nl": "datasets mentioned at venuename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )", "can": "dataset of paper whose venue is nature", "variables": {"venuename0": "fb:en.venue.icml"}, "idx": "train_scholar_nat-278", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )"}
{"nl": "the papers on keyphrasename0 by authorname0 at venuename0 in year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper that noah smith writes and whose keyphrase is semantic parsing and whose venue is nature and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.li_dong", "keyphrasename0": "fb:en.keyphrase.semantic_parsing", "year0": "2016", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-279", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) )"}
{"nl": "How many papers were written on keyphrasename0 in the past year ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose keyphrase is semantic parsing and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.question_answering", "year0": "2016"}, "idx": "train_scholar_nat-280", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "How many papers were published on keyphrasename0 in year0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose keyphrase is semantic parsing and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.bacterial_wilt", "year0": "2016"}, "idx": "train_scholar_nat-281", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "How many papers were written on the keyphrasename0 this year ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose keyphrase is semantic parsing and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.machine_translation", "year0": "2016"}, "idx": "train_scholar_nat-282", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "which year had the most venuename0 papers ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue_paper_venue ) ) ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ) ) ( string publication_year_paper_number ) ) )", "can": "publication year of paper whose venue is venue that is venue of the most number of paper", "variables": {"venuename0": "fb:en.venue.nips"}, "idx": "train_scholar_nat-283", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue_paper_venue ) ) ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ) ) ( string publication_year_paper_number ) ) )"}
{"nl": "what year had the most venuename0 papers ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue_paper_venue ) ) ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ) ) ( string publication_year_paper_number ) ) )", "can": "publication year of paper whose venue is venue that is venue of the most number of paper", "variables": {"venuename0": "fb:en.venue.nips"}, "idx": "train_scholar_nat-284", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue_paper_venue ) ) ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ) ) ( string publication_year_paper_number ) ) )"}
{"nl": "what year had the most number of venuename0 papers ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue_paper_venue ) ) ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ) ) ( string publication_year_paper_number ) ) )", "can": "publication year of paper whose venue is venue that is venue of the most number of paper", "variables": {"venuename0": "fb:en.venue.nips"}, "idx": "train_scholar_nat-285", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue_paper_venue ) ) ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ) ) ( string publication_year_paper_number ) ) )"}
{"nl": "who writes papers with authorname0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )", "can": "author that writes paper that noah smith writes", "variables": {"authorname0": "fb:en.author.ras_bodik"}, "idx": "train_scholar_nat-286", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )"}
{"nl": "Who is a coauthor with authorname0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )", "can": "author that writes paper that noah smith writes", "variables": {"authorname0": "fb:en.author.zachary_tatlock"}, "idx": "train_scholar_nat-287", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )"}
{"nl": "Who are authorname0 's co-authors", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )", "can": "author that writes paper that noah smith writes", "variables": {"authorname0": "fb:en.author.daphne_koller"}, "idx": "train_scholar_nat-288", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )"}
{"nl": "Who has coauthored with authorname0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )", "can": "author that writes paper that noah smith writes", "variables": {"authorname0": "fb:en.author.dan_suciu"}, "idx": "train_scholar_nat-289", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )"}
{"nl": "co-authors of authorname0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )", "can": "author that writes paper that noah smith writes", "variables": {"authorname0": "fb:en.author.lorenzo_bruzzone"}, "idx": "train_scholar_nat-290", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )"}
{"nl": "author who wrote papers with authorname0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )", "can": "author that writes paper that noah smith writes", "variables": {"authorname0": "fb:en.author.emina_torlak"}, "idx": "train_scholar_nat-291", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )"}
{"nl": "authors who collaborated with authorname0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )", "can": "author that writes paper that noah smith writes", "variables": {"authorname0": "fb:en.author.emina_torlak"}, "idx": "train_scholar_nat-292", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )"}
{"nl": "who does authorname0 author with ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )", "can": "author that writes paper that noah smith writes", "variables": {"authorname0": "fb:en.author.luke_s_zettlemoyer"}, "idx": "train_scholar_nat-293", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )"}
{"nl": "Who are authorname0 's coauthors", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )", "can": "author that writes paper that noah smith writes", "variables": {"authorname0": "fb:en.author.daphne_koller"}, "idx": "train_scholar_nat-294", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )"}
{"nl": "who are all the co-authors of authorname0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )", "can": "author that writes paper that noah smith writes", "variables": {"authorname0": "fb:en.author.srinivasan_iyer"}, "idx": "train_scholar_nat-295", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )"}
{"nl": "Who has coauthored with authorname0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )", "can": "author that writes paper that noah smith writes", "variables": {"authorname0": "fb:en.author.luke_s_zettlemoyer"}, "idx": "train_scholar_nat-296", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )"}
{"nl": "coauthors of authorname0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )", "can": "author that writes paper that noah smith writes", "variables": {"authorname0": "fb:en.author.noah_a_smith"}, "idx": "train_scholar_nat-297", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ) )"}
{"nl": "what datasets did authorname0 use ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "dataset of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.oren_etzioni"}, "idx": "train_scholar_nat-298", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "what datasets are used in papers by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "dataset of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.oren_etzioni"}, "idx": "train_scholar_nat-299", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "what datasets did authorname0 use in his papers ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "dataset of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.oren_etzioni"}, "idx": "train_scholar_nat-300", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "what datasets were used by authorname0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "dataset of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.oren_etzioni"}, "idx": "train_scholar_nat-301", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "datasets used in papers written by authorname0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "dataset of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.oren_etzioni"}, "idx": "train_scholar_nat-302", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "Datasets by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "dataset of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.ali_farhadi"}, "idx": "train_scholar_nat-303", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "find me paper on using keyphrasename0 for keyphrasename1", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )", "can": "paper whose keyphrase is semantic parsing and whose keyphrase is deep learning", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning", "keyphrasename1": "fb:en.keyphrase.machine_translation"}, "idx": "train_scholar_nat-304", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )"}
{"nl": "keyphrasename0 for keyphrasename1", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )", "can": "paper whose keyphrase is semantic parsing and whose keyphrase is deep learning", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning", "keyphrasename1": "fb:en.keyphrase.question_answering"}, "idx": "train_scholar_nat-305", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )"}
{"nl": "keyphrasename1 papers using keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )", "can": "paper whose keyphrase is semantic parsing and whose keyphrase is deep learning", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning", "keyphrasename1": "fb:en.keyphrase.question_answering"}, "idx": "train_scholar_nat-306", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )"}
{"nl": "are there keyphrasename0 papers that use keyphrasename1 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )", "can": "paper whose keyphrase is semantic parsing and whose keyphrase is deep learning", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning", "keyphrasename1": "fb:en.keyphrase.question_answering"}, "idx": "train_scholar_nat-307", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )"}
{"nl": "keyphrasename0 in keyphrasename1 papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )", "can": "paper whose keyphrase is semantic parsing and whose keyphrase is deep learning", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning", "keyphrasename1": "fb:en.keyphrase.question_answering"}, "idx": "train_scholar_nat-308", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )"}
{"nl": "What is the paper of both keyphrasename0 and keyphrasename1 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )", "can": "paper whose keyphrase is semantic parsing and whose keyphrase is deep learning", "variables": {"keyphrasename0": "fb:en.keyphrase.convolution", "keyphrasename1": "fb:en.keyphrase.combinatoric"}, "idx": "train_scholar_nat-309", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )"}
{"nl": "has any paper tried keyphrasename0 for keyphrasename1 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )", "can": "paper whose keyphrase is semantic parsing and whose keyphrase is deep learning", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning", "keyphrasename1": "fb:en.keyphrase.question_answering"}, "idx": "train_scholar_nat-310", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )"}
{"nl": "most recent keyphrasename0 papers", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-311", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "most recent keyphrasename0 papers", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-312", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "latest keyphrasename0 papers", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-313", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "What are the latest publications on keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.neutralizing_antibody"}, "idx": "train_scholar_nat-314", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "Most recent keyphrasename0 conference ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.neural"}, "idx": "train_scholar_nat-315", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "Show me the most recent papers on keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.machine_translation"}, "idx": "train_scholar_nat-316", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "What are the most recent papers written in keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.stochastic_approximation"}, "idx": "train_scholar_nat-317", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "What is the most recent paper of keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.image_understanding"}, "idx": "train_scholar_nat-318", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "What are the most recent papers on keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.visual_detection"}, "idx": "train_scholar_nat-319", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "latest keyphrasename0 papers", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning"}, "idx": "train_scholar_nat-320", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "What years did authorname0 publish papers in ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ) )", "can": "publication year of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.alvin_cheung"}, "idx": "train_scholar_nat-321", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ) )"}
{"nl": "who does authorname0 cite", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( call SW.reverse ( string cites_author_author ) ) ( string = ) authorname0 ) )", "can": "author that writes paper that paper that noah smith writes cites", "variables": {"authorname0": "fb:en.author.oren_etzioni"}, "idx": "train_scholar_nat-322", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( call SW.reverse ( string cites_author_author ) ) ( string = ) authorname0 ) )"}
{"nl": "papers citing authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string cites_paper_author ) ( string = ) authorname0 ) )", "can": "paper that cites paper that noah smith writes", "variables": {"authorname0": "fb:en.author.oren_etzioni"}, "idx": "train_scholar_nat-323", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string cites_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What papers cite authorname0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string cites_paper_author ) ( string = ) authorname0 ) )", "can": "paper that cites paper that noah smith writes", "variables": {"authorname0": "fb:en.author.neeraj_jain"}, "idx": "train_scholar_nat-324", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string cites_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "Which papers cite authorname0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string cites_paper_author ) ( string = ) authorname0 ) )", "can": "paper that cites paper that noah smith writes", "variables": {"authorname0": "fb:en.author.chris_dyer"}, "idx": "train_scholar_nat-325", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string cites_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "citations for authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string cites_paper_author ) ( string = ) authorname0 ) )", "can": "paper that cites paper that noah smith writes", "variables": {"authorname0": "fb:en.author.chris_dyer"}, "idx": "train_scholar_nat-326", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string cites_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "journal papers for keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.journal ) ( string ! type ) ) ( string keyphrase_journal_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "journal of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.instance_segmentation"}, "idx": "train_scholar_nat-327", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.journal ) ( string ! type ) ) ( string keyphrase_journal_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "who has the most papers in keyphrasename0 after year0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ) )", "can": "author that writes the most number of paper whose keyphrase is semantic parsing and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing", "year0": "2005"}, "idx": "train_scholar_nat-328", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "who has written the most papers on keyphrasename0 since year0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ) )", "can": "author that writes the most number of paper whose keyphrase is semantic parsing and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing", "year0": "2005"}, "idx": "train_scholar_nat-329", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "who published the most in keyphrasename0 after year0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ) )", "can": "author that writes the most number of paper whose keyphrase is semantic parsing and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing", "year0": "2005"}, "idx": "train_scholar_nat-330", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "How many citations does authorname0 's keyphrasename0 paper have ?", "lf": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton ( name fb:en.paper ) ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string citation_count_paper_number ) ) ) )", "can": "total citation count of paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.li_dong", "keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-331", "canonical_lf": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton ( name fb:en.paper ) ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ( string citation_count_paper_number ) ) ) )"}
{"nl": "How many citations does authorname0 's keyphrasename0 paper have ?", "lf": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton ( name fb:en.paper ) ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string citation_count_paper_number ) ) ) )", "can": "total citation count of paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.percy_liang", "keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-332", "canonical_lf": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton ( name fb:en.paper ) ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ( string citation_count_paper_number ) ) ) )"}
{"nl": "keyphrasename0 papers earlier than year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string < ) ( year0 ) ) )", "can": "paper whose keyphrase is semantic parsing and whose publication year is smaller than 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.character_recognition", "year0": "2010"}, "idx": "train_scholar_nat-333", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string < ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers before year0 about keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string < ) ( year0 ) ) )", "can": "paper whose keyphrase is semantic parsing and whose publication year is smaller than 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.character_recognition", "year0": "2010"}, "idx": "train_scholar_nat-334", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string < ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "keyphrasename0 papers from before year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string < ) ( year0 ) ) )", "can": "paper whose keyphrase is semantic parsing and whose publication year is smaller than 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.character_recognition", "year0": "2010"}, "idx": "train_scholar_nat-335", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string < ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers about keyphrasename0 from before year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string < ) ( year0 ) ) )", "can": "paper whose keyphrase is semantic parsing and whose publication year is smaller than 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.character_recognition", "year0": "2010"}, "idx": "train_scholar_nat-336", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string < ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "keyphrasename0 papers before year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string < ) ( year0 ) ) )", "can": "paper whose keyphrase is semantic parsing and whose publication year is smaller than 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.character_recognition", "year0": "2010"}, "idx": "train_scholar_nat-337", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string < ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "what topics does authorname0 write about most ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.keyphrase ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string keyphrase_paper_keyphrase ) ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) )", "can": "keyphrase that is keyphrase of the most number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.oren_etzioni"}, "idx": "train_scholar_nat-338", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.keyphrase ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string keyphrase_paper_keyphrase ) ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) )"}
{"nl": "How many papers related to keyphrasename0 cited the dataset datasetname0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string cites_paper_paper ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ) ) )", "can": "number of paper whose keyphrase is semantic parsing and that cites paper whose dataset is reviews", "variables": {"datasetname0": "fb:en.dataset.imagenet", "keyphrasename0": "fb:en.keyphrase.deep_learning"}, "idx": "train_scholar_nat-339", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string cites_paper_paper ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ) ) )"}
{"nl": "most cited papers on keyphrasename0", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest citation count", "variables": {"keyphrasename0": "fb:en.keyphrase.stochastic_optimization"}, "idx": "train_scholar_nat-340", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "keyphrasename0 top papers", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest citation count", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-341", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "List top papers for keyphrasename0", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest citation count", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_segmentation"}, "idx": "train_scholar_nat-342", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "keyphrasename0 papers that have the most citations", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest citation count", "variables": {"keyphrasename0": "fb:en.keyphrase.sentiment_analysis"}, "idx": "train_scholar_nat-343", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "most cited papers for keyphrasename0", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest citation count", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_segmentation"}, "idx": "train_scholar_nat-344", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "Most cited papers on keyphrasename0", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest citation count", "variables": {"keyphrasename0": "fb:en.keyphrase.parsing"}, "idx": "train_scholar_nat-345", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "What is the most cited paper by authorname0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper that noah smith writes and that has the largest citation count", "variables": {"authorname0": "fb:en.author.ali_farhadi"}, "idx": "train_scholar_nat-346", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "What is the highest cited paper by authorname0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper that noah smith writes and that has the largest citation count", "variables": {"authorname0": "fb:en.author.jeff_dean"}, "idx": "train_scholar_nat-347", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "What is the most cited paper of authorname0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper that noah smith writes and that has the largest citation count", "variables": {"authorname0": "fb:en.author.percy_liang"}, "idx": "train_scholar_nat-348", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "What is authorname0 's highest cited paper ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper that noah smith writes and that has the largest citation count", "variables": {"authorname0": "fb:en.author.yejin_choi"}, "idx": "train_scholar_nat-349", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "What paper by authorname0 has the most citation ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper that noah smith writes and that has the largest citation count", "variables": {"authorname0": "fb:en.author.brian_curless"}, "idx": "train_scholar_nat-350", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "How many papers did authorname0 publish in year0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.noah_smith", "year0": "2010"}, "idx": "train_scholar_nat-351", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have in year0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.michael_i--_jordan", "year0": "2016"}, "idx": "train_scholar_nat-352", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers did authorname0 publish in year0", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.brian_derenzi", "year0": "2015"}, "idx": "train_scholar_nat-353", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "Which is the earliest paper by authorname0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string min ) ( string publication_year_paper_number ) ) )", "can": "paper that noah smith writes and that has the smallest publication year", "variables": {"authorname0": "fb:en.author.aravind_rajeswaran"}, "idx": "train_scholar_nat-354", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string min ) ( string publication_year_paper_number ) ) )"}
{"nl": "earliest paper written by authorname0", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string min ) ( string publication_year_paper_number ) ) )", "can": "paper that noah smith writes and that has the smallest publication year", "variables": {"authorname0": "fb:en.author.srinivasan_iyer"}, "idx": "train_scholar_nat-355", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string min ) ( string publication_year_paper_number ) ) )"}
{"nl": "most recent papers of authorname0", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string min ) ( string publication_year_paper_number ) ) )", "can": "paper that noah smith writes and that has the smallest publication year", "variables": {"authorname0": "fb:en.author.ali_farhadi"}, "idx": "train_scholar_nat-356", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string min ) ( string publication_year_paper_number ) ) )"}
{"nl": "How many papers has authorname0 and authorname1 written together ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) ) )", "can": "number of paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.richard_ladner", "authorname1": "fb:en.author.linda_shapiro"}, "idx": "train_scholar_nat-357", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) ) )"}
{"nl": "how many papers authorname0 and authorname1 coauthored ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) ) )", "can": "number of paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.richard_anderson", "authorname1": "fb:en.author.gaetano_borriello"}, "idx": "train_scholar_nat-358", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) ) )"}
{"nl": "how many papers did authorname0 and authorname1 write together", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) ) )", "can": "number of paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.nicola_dell", "authorname1": "fb:en.author.brian_derenzi"}, "idx": "train_scholar_nat-359", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) ) )"}
{"nl": "How many papers by authorname0 and authorname1", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) ) )", "can": "number of paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.ali_farhadi", "authorname1": "fb:en.author.steve_seitz"}, "idx": "train_scholar_nat-360", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) ) )"}
{"nl": "How many papers have authorname0 and authorname1 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) ) )", "can": "number of paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.dan_suciu", "authorname1": "fb:en.author.magdalena_balazinska"}, "idx": "train_scholar_nat-361", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) ) )"}
{"nl": "How many papers do authorname0 and authorname1 have ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) ) )", "can": "number of paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.dan_suciu", "authorname1": "fb:en.author.magdalena_balazinska"}, "idx": "train_scholar_nat-362", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) ) )"}
{"nl": "who wrote the most papers for venuename0 year0", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "author that writes the most number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2010", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-363", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "who published papers in venuename0 year0", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "author that writes the most number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2010", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-364", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "who wrote the most venuename0 papers in year0", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "author that writes the most number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2010", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-365", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "most published author at venuename0 year0", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "author that writes the most number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2010", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-366", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "How many papers were written on keyphrasename0 in the past misc0 years ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ) )", "can": "number of paper whose keyphrase is semantic parsing and whose publication year is larger than 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.question_answering", "misc0": "5"}, "idx": "train_scholar_nat-367", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "How many papers in venuename0 year0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2016", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-368", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "number of papers published in venuename0 year0", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2015", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-369", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "papers from year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose publication year is 2012", "variables": {"year0": "2014"}, "idx": "train_scholar_nat-370", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )"}
{"nl": "year0 papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose publication year is 2012", "variables": {"year0": "2014"}, "idx": "train_scholar_nat-371", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )"}
{"nl": "What papers does authorname0 have in venuename0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper that noah smith writes and whose venue is nature", "variables": {"authorname0": "fb:en.author.daphne_koller", "venuename0": "fb:en.venue.icml"}, "idx": "train_scholar_nat-372", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "what paper has authorname0 published in venuename0 journal ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper that noah smith writes and whose venue is nature", "variables": {"authorname0": "fb:en.author.alex_graves", "venuename0": "fb:en.venue.nature"}, "idx": "train_scholar_nat-373", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "what paper has authorname0 published in venuename0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper that noah smith writes and whose venue is nature", "variables": {"authorname0": "fb:en.author.alex_graves", "venuename0": "fb:en.venue.nature"}, "idx": "train_scholar_nat-374", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What has authorname0 published at venuename0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper that noah smith writes and whose venue is nature", "variables": {"venuename0": "fb:en.venue.emnlp", "authorname0": "fb:en.author.graham_neubig"}, "idx": "train_scholar_nat-375", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What is the paper with the most citation about keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest citation count", "variables": {"keyphrasename0": "fb:en.keyphrase.alexnet"}, "idx": "train_scholar_nat-376", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "keyphrases used by authorname0 and authorname1", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname1 ) ( string keyphrase_paper_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.akihito_kotera", "authorname1": "fb:en.author.masatsugu_kidode"}, "idx": "train_scholar_nat-377", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname1 ) ( string keyphrase_paper_keyphrase ) ) )"}
{"nl": "topics at venuename0 year0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ) )", "can": "keyphrase of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-378", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ) )"}
{"nl": "most common topics at venuename0 year0", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.keyphrase ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string keyphrase_paper_keyphrase ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "keyphrase that is keyphrase of the most number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-379", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.keyphrase ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string keyphrase_paper_keyphrase ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "most popular topics at venuename0 year0", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.keyphrase ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string keyphrase_paper_keyphrase ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "keyphrase that is keyphrase of the most number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-380", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.keyphrase ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string keyphrase_paper_keyphrase ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "hot topics at venuename0 year0", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.keyphrase ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string keyphrase_paper_keyphrase ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "keyphrase that is keyphrase of the most number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-381", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.keyphrase ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string keyphrase_paper_keyphrase ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "How many papers did authorname0 write last year ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.luke_campbell", "misc0": "1"}, "idx": "train_scholar_nat-382", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers related to keyphrasename0 in venuename0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "number of paper whose keyphrase is semantic parsing and whose venue is nature", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_reinforcement_learning", "venuename0": "fb:en.venue.nips"}, "idx": "train_scholar_nat-383", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "Papers on datasetname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )", "can": "paper whose dataset is reviews", "variables": {"datasetname0": "fb:en.dataset.imagenet"}, "idx": "train_scholar_nat-384", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )"}
{"nl": "which papers used datasetname0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )", "can": "paper whose dataset is reviews", "variables": {"datasetname0": "fb:en.dataset.nell"}, "idx": "train_scholar_nat-385", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )"}
{"nl": "papers about datasetname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )", "can": "paper whose dataset is reviews", "variables": {"datasetname0": "fb:en.dataset.nell"}, "idx": "train_scholar_nat-386", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )"}
{"nl": "papers about datasetname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )", "can": "paper whose dataset is reviews", "variables": {"datasetname0": "fb:en.dataset.imagenet"}, "idx": "train_scholar_nat-387", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )"}
{"nl": "List the papers that used datasetname0 dataset", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )", "can": "paper whose dataset is reviews", "variables": {"datasetname0": "fb:en.dataset.caltech"}, "idx": "train_scholar_nat-388", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )"}
{"nl": "papers using datasetname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )", "can": "paper whose dataset is reviews", "variables": {"datasetname0": "fb:en.dataset.nell"}, "idx": "train_scholar_nat-389", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )"}
{"nl": "papers that use datasetname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )", "can": "paper whose dataset is reviews", "variables": {"datasetname0": "fb:en.dataset.imagenet"}, "idx": "train_scholar_nat-390", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )"}
{"nl": "datasetname0 papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )", "can": "paper whose dataset is reviews", "variables": {"datasetname0": "fb:en.dataset.nell"}, "idx": "train_scholar_nat-391", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )"}
{"nl": "conferences in year0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string venue_paper_venue ) ) )", "can": "venue of paper whose publication year is 2012", "variables": {"year0": "2013"}, "idx": "train_scholar_nat-392", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string venue_paper_venue ) ) )"}
{"nl": "how is the most cited author in venuename0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string publishin_author_venue ) ( string = ) venuename0 ) ( string max ) ( string citation_count_author_number ) ) )", "can": "author that writes paper whose venue is nature and that has the largest citation count", "variables": {"venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-393", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string publishin_author_venue ) ( string = ) venuename0 ) ( string max ) ( string citation_count_author_number ) ) )"}
{"nl": "what are some keyphrasename0 papers that authorname0 did not write ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string ! = ) authorname0 ) )", "can": "paper that noah smith not writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.chris_dyer", "keyphrasename0": "fb:en.keyphrase.syntactic_parsing"}, "idx": "train_scholar_nat-394", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string ! = ) authorname0 ) )"}
{"nl": "are there any keyphrasename0 papers not written by authorname0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string ! = ) authorname0 ) )", "can": "paper that noah smith not writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.chris_dyer", "keyphrasename0": "fb:en.keyphrase.syntactic_parsing"}, "idx": "train_scholar_nat-395", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string ! = ) authorname0 ) )"}
{"nl": "what are keyphrasename0 papers not written by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string ! = ) authorname0 ) )", "can": "paper that noah smith not writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.chris_dyer", "keyphrasename0": "fb:en.keyphrase.syntactic_parsing"}, "idx": "train_scholar_nat-396", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string ! = ) authorname0 ) )"}
{"nl": "keyphrasename0 papers not written by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string ! = ) authorname0 ) )", "can": "paper that noah smith not writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.chris_dyer", "keyphrasename0": "fb:en.keyphrase.syntactic_parsing"}, "idx": "train_scholar_nat-397", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string ! = ) authorname0 ) )"}
{"nl": "papers published in the last year", "lf": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper that has the largest publication year", "variables": {}, "idx": "train_scholar_nat-398", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "who works on keyphrasename0 for keyphrasename1", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string write_author_paper ) ( string = ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) ) )", "can": "author that writes paper whose keyphrase is semantic parsing and whose keyphrase is deep learning", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning", "keyphrasename1": "fb:en.keyphrase.machine_translation"}, "idx": "train_scholar_nat-399", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string write_author_paper ) ( string = ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) ) )"}
{"nl": "authors in keyphrasename0 for keyphrasename1", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string write_author_paper ) ( string = ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) ) )", "can": "author that writes paper whose keyphrase is semantic parsing and whose keyphrase is deep learning", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning", "keyphrasename1": "fb:en.keyphrase.question_answering"}, "idx": "train_scholar_nat-400", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string write_author_paper ) ( string = ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) ) )"}
{"nl": "When was authorname0 's first publication ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string min ) ( string publication_year_paper_number ) ) ( string publication_year_paper_number ) ) )", "can": "publication year of paper that noah smith writes and that has the smallest publication year", "variables": {"authorname0": "fb:en.author.richard_anderson"}, "idx": "train_scholar_nat-401", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string min ) ( string publication_year_paper_number ) ) ( string publication_year_paper_number ) ) )"}
{"nl": "When was authorname0 's first paper written ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string min ) ( string publication_year_paper_number ) ) ( string publication_year_paper_number ) ) )", "can": "publication year of paper that noah smith writes and that has the smallest publication year", "variables": {"authorname0": "fb:en.author.benjamin_mako_hill"}, "idx": "train_scholar_nat-402", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string min ) ( string publication_year_paper_number ) ) ( string publication_year_paper_number ) ) )"}
{"nl": "Who cites authorname0 the most", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( call SW.reverse ( string author_paper_author ) ) ) ( string cites_paper_paper ) ( string = ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) ) )", "can": "author that writes the most number of paper that cites paper that noah smith writes", "variables": {"authorname0": "fb:en.author.luke_zettlemoyer"}, "idx": "train_scholar_nat-403", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( call SW.reverse ( string author_paper_author ) ) ) ( string cites_paper_paper ) ( string = ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) ) )"}
{"nl": "Who cites authorname0 most ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( call SW.reverse ( string author_paper_author ) ) ) ( string cites_paper_paper ) ( string = ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) ) )", "can": "author that writes the most number of paper that cites paper that noah smith writes", "variables": {"authorname0": "fb:en.author.daniel_a_reed"}, "idx": "train_scholar_nat-404", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( call SW.reverse ( string author_paper_author ) ) ) ( string cites_paper_paper ) ( string = ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) ) )"}
{"nl": "What journals does authorname0 publish most in ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.journal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string journal_paper_journal ) ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) )", "can": "journal that is journal of the most number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.yuting_ye"}, "idx": "train_scholar_nat-405", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.journal ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string journal_paper_journal ) ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) )"}
{"nl": "how many papers are in venuename0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )", "can": "number of paper whose venue is nature", "variables": {"venuename0": "fb:en.venue.emnlp"}, "idx": "train_scholar_nat-406", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )"}
{"nl": "what papers have fewer than misc0 citations by venuename0 papers ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string citation_count_paper_number ) ( string < ) misc0 ) )", "can": "paper whose venue is nature and whose citation count is smaller than 10", "variables": {"venuename0": "fb:en.venue.acl", "misc0": "5"}, "idx": "train_scholar_nat-407", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string citation_count_paper_number ) ( string < ) misc0 ) )"}
{"nl": "venuename0 papers with less than misc0 citations", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string citation_count_paper_number ) ( string < ) misc0 ) )", "can": "paper whose venue is nature and whose citation count is smaller than 10", "variables": {"venuename0": "fb:en.venue.acl", "misc0": "5"}, "idx": "train_scholar_nat-408", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string citation_count_paper_number ) ( string < ) misc0 ) )"}
{"nl": "what papers have fewer than misc0 citations by venuename0 papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string citation_count_paper_number ) ( string < ) misc0 ) )", "can": "paper whose venue is nature and whose citation count is smaller than 10", "variables": {"venuename0": "fb:en.venue.acl", "misc0": "5"}, "idx": "train_scholar_nat-409", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string citation_count_paper_number ) ( string < ) misc0 ) )"}
{"nl": "what papers have fewer than misc0 citations by venuename0 papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string citation_count_paper_number ) ( string < ) misc0 ) )", "can": "paper whose venue is nature and whose citation count is smaller than 10", "variables": {"venuename0": "fb:en.venue.acl", "misc0": "5"}, "idx": "train_scholar_nat-410", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string citation_count_paper_number ) ( string < ) misc0 ) )"}
{"nl": "Papers from venuename0 year0 conference", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2016", "venuename0": "fb:en.venue.ictd"}, "idx": "train_scholar_nat-411", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )"}
{"nl": "papers published at venuename0 year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2010", "venuename0": "fb:en.venue.emnlp"}, "idx": "train_scholar_nat-412", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )"}
{"nl": "What are the papers from venuename0 year0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2016", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-413", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )"}
{"nl": "Papers from venuename0 year0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2016", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-414", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )"}
{"nl": "Which papers were accepted in venuename0 year0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2013", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-415", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )"}
{"nl": "What papers were published during the conference venuename0 year0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2016", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-416", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )"}
{"nl": "venuename0 papers year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2015", "venuename0": "fb:en.venue.nips"}, "idx": "train_scholar_nat-417", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )"}
{"nl": "venuename0 papers in year0 with title0 in the title", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string title_paper_title ) ( string = ) title0 ) )", "can": "paper whose title is neural attention and whose venue is nature and whose publication year is 2012", "variables": {"title0": "fb:en.title.neural_attention", "year0": "2016", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-420", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string title_paper_title ) ( string = ) title0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )"}
{"nl": "Who writes the most papers in keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "author that writes the most number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.machine_learning"}, "idx": "train_scholar_nat-421", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "Who writes the most papers in keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "author that writes the most number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.machine_learning"}, "idx": "train_scholar_nat-422", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "Who wrote keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ) )", "can": "author that writes paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.blink"}, "idx": "train_scholar_nat-423", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ) )"}
{"nl": "Authors of papers on keyphrasename0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ) )", "can": "author that writes paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.machine_translation"}, "idx": "train_scholar_nat-424", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ) )"}
{"nl": "people working on keyphrasename0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ) )", "can": "author that writes paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.query_expansion"}, "idx": "train_scholar_nat-425", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ) )"}
{"nl": "Who publishes in keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ) )", "can": "author that writes paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning"}, "idx": "train_scholar_nat-426", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ) )"}
{"nl": "how many papers by authorname1 are cited by authorname0", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname1 ) ( string cites_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes and that paper that richard anderson writes cites", "variables": {"authorname0": "fb:en.author.dan_klein", "authorname1": "fb:en.author.michael_i--_jordan"}, "idx": "train_scholar_nat-427", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string cites_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) ) )"}
{"nl": "who else was on the paper with authorname0 and authorname1 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string write_author_paper ) ( string = ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname1 ) ) )", "can": "author that writes paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.ameet_soni", "authorname1": "fb:en.author.ras_bodik"}, "idx": "train_scholar_nat-428", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string write_author_paper ) ( string = ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname1 ) ) )"}
{"nl": "what papers are in the venuename0 of year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-429", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )"}
{"nl": "What conference does authorname0 publish the most in", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue_paper_venue ) ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) )", "can": "venue that is venue of the most number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.luke_zettlemoyer"}, "idx": "train_scholar_nat-430", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue_paper_venue ) ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) )"}
{"nl": "what venue does authorname0 publish the most in", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue_paper_venue ) ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) )", "can": "venue that is venue of the most number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.luke_zettlemoyer"}, "idx": "train_scholar_nat-431", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue_paper_venue ) ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) )"}
{"nl": "Since year0 who has published works about keyphrasename0 ( Inflammatory Bowel Disease ) and keyphrasename1 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string write_author_paper ) ( string = ) ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ) )", "can": "author that writes paper whose keyphrase is semantic parsing and whose keyphrase is deep learning and whose publication year is larger than 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning", "keyphrasename1": "fb:en.keyphrase.natural_language_processing", "year0": "2015"}, "idx": "train_scholar_nat-432", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string write_author_paper ) ( string = ) ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) ) )"}
{"nl": "Since year0 who has published works about keyphrasename0 and keyphrasename1 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string write_author_paper ) ( string = ) ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ) )", "can": "author that writes paper whose keyphrase is semantic parsing and whose keyphrase is deep learning and whose publication year is larger than 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning", "keyphrasename1": "fb:en.keyphrase.question_answering", "year0": "2014"}, "idx": "train_scholar_nat-433", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string write_author_paper ) ( string = ) ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) ) )"}
{"nl": "year0 papers using datasetname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )", "can": "paper whose dataset is reviews and whose publication year is 2012", "variables": {"datasetname0": "fb:en.dataset.imagenet", "year0": "2014"}, "idx": "train_scholar_nat-434", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )"}
{"nl": "What is the earliest keyphrasename1 paper for keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) ( string min ) ( string publication_year_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and whose keyphrase is deep learning and that has the smallest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.machine_translation", "keyphrasename1": "fb:en.keyphrase.deep_learning"}, "idx": "train_scholar_nat-435", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) ( string min ) ( string publication_year_paper_number ) ) )"}
{"nl": "Earliest keyphrasename0 paper with keyphrasename1", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) ( string min ) ( string publication_year_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and whose keyphrase is deep learning and that has the smallest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.machine_translation", "keyphrasename1": "fb:en.keyphrase.deep_learning"}, "idx": "train_scholar_nat-436", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) ( string min ) ( string publication_year_paper_number ) ) )"}
{"nl": "What journals are authorname0 's articles published in ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string journal_paper_journal ) ) )", "can": "journal of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.alex_graves"}, "idx": "train_scholar_nat-437", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string journal_paper_journal ) ) )"}
{"nl": "What journals has authorname0 published in ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string journal_paper_journal ) ) )", "can": "journal of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.alex_graves"}, "idx": "train_scholar_nat-438", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string journal_paper_journal ) ) )"}
{"nl": "What authors wrote papers about keyphrasename0 in year0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )", "can": "author that writes paper whose keyphrase is semantic parsing and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing", "year0": "2016"}, "idx": "train_scholar_nat-439", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ) )"}
{"nl": "When did authorname0 publish ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ) )", "can": "publication year of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.luke_s_zettlemoyer"}, "idx": "train_scholar_nat-440", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ) )"}
{"nl": "keyphrasename0 year0 papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose keyphrase is semantic parsing and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.parsing", "year0": "2014"}, "idx": "train_scholar_nat-441", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "keyphrasename0 year0 papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose keyphrase is semantic parsing and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing", "year0": "2016"}, "idx": "train_scholar_nat-442", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "What papers were written on keyphrasename0 in year0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose keyphrase is semantic parsing and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.question_answering", "year0": "2016"}, "idx": "train_scholar_nat-443", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "who writes for venuename0 or venuename1 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string write_author_paper ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) ( call SW.concat venuename0 venuename1 ) ) ) )", "can": "author that writes paper whose venue is nature or acl", "variables": {"venuename0": "fb:en.venue.vldb", "venuename1": "fb:en.venue.icml"}, "idx": "train_scholar_nat-444", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string write_author_paper ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) ( call SW.concat venuename0 venuename1 ) ) ) )"}
{"nl": "Find journals about keyphrasename0 .", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.journal ) ( string ! type ) ) ( string keyphrase_journal_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "journal of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.machine_translation"}, "idx": "train_scholar_nat-445", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.journal ) ( string ! type ) ) ( string keyphrase_journal_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "List the journals related to keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.journal ) ( string ! type ) ) ( string keyphrase_journal_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "journal of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.temporal_data"}, "idx": "train_scholar_nat-446", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.journal ) ( string ! type ) ) ( string keyphrase_journal_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "which venuename0 year0 papers about keyphrasename0 used datasetname0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose dataset is reviews and whose publication year is 2012", "variables": {"datasetname0": "fb:en.dataset.jeopardy!_questions", "keyphrasename0": "fb:en.keyphrase.parsing", "year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-447", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )"}
{"nl": "keyphrasename0 papers using datasetname0 published at venuename0 year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature and whose dataset is reviews and whose publication year is 2012", "variables": {"datasetname0": "fb:en.dataset.jeopardy!_questions", "keyphrasename0": "fb:en.keyphrase.parsing", "year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-448", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )"}
{"nl": "in what journals does authorname0 publish ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string journal_paper_journal ) ) )", "can": "journal of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.li_dong"}, "idx": "train_scholar_nat-449", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string journal_paper_journal ) ) )"}
{"nl": "Which journals did authorname0 submit papers to ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string journal_paper_journal ) ) )", "can": "journal of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.linda_shapiro"}, "idx": "train_scholar_nat-450", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( string journal_paper_journal ) ) )"}
{"nl": "venuename0 authors", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ) )", "can": "author that writes paper whose venue is nature", "variables": {"venuename0": "fb:en.venue.nips"}, "idx": "train_scholar_nat-451", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ) )"}
{"nl": "who are the authors at venuename0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ) )", "can": "author that writes paper whose venue is nature", "variables": {"venuename0": "fb:en.venue.nips"}, "idx": "train_scholar_nat-452", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ) )"}
{"nl": "which papers has authorname0 cited the most ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites_paper_paper ) ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) )", "can": "paper that the most number of paper that noah smith writes cites", "variables": {"authorname0": "fb:en.author.michael_i--_jordan"}, "idx": "train_scholar_nat-453", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites_paper_paper ) ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) )"}
{"nl": "which venue publishes the most papers about keyphrasename0", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue_paper_venue ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "venue that is venue of the most number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning"}, "idx": "train_scholar_nat-454", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue_paper_venue ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "How many publications were added to the journalname0 journal this year ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string journal_paper_journal ) ( string = ) journalname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose journal is cell and whose publication year is 2012", "variables": {"journalname0": "fb:en.journal.cell", "year0": "2016"}, "idx": "train_scholar_nat-455", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string journal_paper_journal ) ( string = ) journalname0 ) ) )"}
{"nl": "What area cites authorname0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string cites_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ) )", "can": "keyphrase of paper that cites paper that noah smith writes", "variables": {"authorname0": "fb:en.author.ras_bodik"}, "idx": "train_scholar_nat-456", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string cites_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ) )"}
{"nl": "What are all the publication titles by authorname0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string title_paper_title ) ) )", "can": "title of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.donald_e_knuth"}, "idx": "train_scholar_nat-457", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string title_paper_title ) ) )"}
{"nl": "papers published in venuename0 year0 by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes and whose venue is nature and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.wei_lu", "year0": "2011", "venuename0": "fb:en.venue.emnlp"}, "idx": "train_scholar_nat-458", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What are some papers dealing with keyphrasename0 in datasetname0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )", "can": "paper whose keyphrase is semantic parsing and whose dataset is reviews", "variables": {"datasetname0": "fb:en.dataset.yago", "keyphrasename0": "fb:en.keyphrase.semantic_data"}, "idx": "train_scholar_nat-459", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) )"}
{"nl": "Who has published the most papers in venuename0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )", "can": "author that writes the most number of paper whose venue is nature", "variables": {"venuename0": "fb:en.venue.nsdi"}, "idx": "train_scholar_nat-460", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )"}
{"nl": "Who has written the most papers at venuename0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )", "can": "author that writes the most number of paper whose venue is nature", "variables": {"venuename0": "fb:en.venue.chi"}, "idx": "train_scholar_nat-461", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )"}
{"nl": "how is the most prolific author in venuename0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )", "can": "author that writes the most number of paper whose venue is nature", "variables": {"venuename0": "fb:en.venue.acl"}, "idx": "train_scholar_nat-462", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ) )"}
{"nl": "conferences that mention datasetname0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ( string venue_paper_venue ) ) )", "can": "venue of paper whose dataset is reviews", "variables": {"datasetname0": "fb:en.dataset.imagenet"}, "idx": "train_scholar_nat-463", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "first keyphrasename0 paper", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string min ) ( string publication_year_paper_number ) ) ( string publication_year_paper_number ) ) )", "can": "publication year of paper whose keyphrase is semantic parsing and that has the smallest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning"}, "idx": "train_scholar_nat-464", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string min ) ( string publication_year_paper_number ) ) ( string publication_year_paper_number ) ) )"}
{"nl": "What was the first paper on keyphrasename0 written ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string min ) ( string publication_year_paper_number ) ) ( string publication_year_paper_number ) ) )", "can": "publication year of paper whose keyphrase is semantic parsing and that has the smallest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.lstm"}, "idx": "train_scholar_nat-465", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string min ) ( string publication_year_paper_number ) ) ( string publication_year_paper_number ) ) )"}
{"nl": "what papers were published in journalname0 in year0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string journal_paper_journal ) ( string = ) journalname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose journal is cell and whose publication year is 2012", "variables": {"journalname0": "fb:en.journal.academic_radiology", "year0": "1995"}, "idx": "train_scholar_nat-466", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string journal_paper_journal ) ( string = ) journalname0 ) ) )"}
{"nl": "what papers do keyphrasename0 papers mostly cite ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites_paper_paper ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "paper that the most number of paper whose keyphrase is semantic parsing cites", "variables": {"keyphrasename0": "fb:en.keyphrase.parsing"}, "idx": "train_scholar_nat-467", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites_paper_paper ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "venue for keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string keyphrase_venue_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "venue of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "train_scholar_nat-468", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string keyphrase_venue_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "How many papers were written on keyphrasename0 in year0 through 2016 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ) )", "can": "number of paper whose keyphrase is semantic parsing and whose publication year is larger than 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.question_answering", "year0": "2011"}, "idx": "train_scholar_nat-469", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "Who has published the most number of papers with authorname0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "author that writes the most number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.richard_sutton"}, "idx": "train_scholar_nat-470", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "What are the best keyphrasename0 conferences ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue_paper_venue ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "venue that is venue of the most number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.nlp"}, "idx": "train_scholar_nat-471", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue_paper_venue ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "papers with more than misc0 citations", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string citation_count_paper_number ) ( string > ) misc0 ) )", "can": "paper whose citation count is larger than 10", "variables": {"misc0": "5"}, "idx": "train_scholar_nat-472", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string citation_count_paper_number ) ( string > ) misc0 ) )"}
{"nl": "Which authors published papers in year0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )", "can": "author that writes paper whose publication year is 2012", "variables": {"year0": "2015"}, "idx": "train_scholar_nat-473", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )"}
{"nl": "what keyphrase does authorname0 write about that gets most citations ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string citation_count_paper_number ) ) ( string keyphrase_paper_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes and that has the largest citation count", "variables": {"authorname0": "fb:en.author.ras_bodik"}, "idx": "train_scholar_nat-474", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string citation_count_paper_number ) ) ( string keyphrase_paper_keyphrase ) ) )"}
{"nl": "papers that were not published in the last year", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string ! = ) ( year0 ) ) )", "can": "paper whose publication year is not 2012", "variables": {"year0": "2015"}, "idx": "train_scholar_nat-475", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string ! = ) ( year0 ) ) )"}
{"nl": "When was authorname0 keyphrasename0 published ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ) )", "can": "publication year of paper that noah smith writes and whose publication year is larger than 2012", "variables": {"authorname0": "fb:en.author.dan_klein", "keyphrasename0": "fb:en.keyphrase.syntactic_parsing"}, "idx": "train_scholar_nat-476", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ) )"}
{"nl": "What are the latest papers by authorname0 and authorname1 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper that noah smith writes and that richard anderson writes and that has the largest publication year", "variables": {"authorname0": "fb:en.author.nigam_h--_shah", "authorname1": "fb:en.author.srinivasan_iyer"}, "idx": "train_scholar_nat-477", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "In year0 what journal published an article about keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string journal_paper_journal ) ) )", "can": "journal of paper whose keyphrase is semantic parsing and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.trophic_cascade", "year0": "2010"}, "idx": "train_scholar_nat-478", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string journal_paper_journal ) ) )"}
{"nl": "which author has the largest number of publications ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ) )", "can": "author that writes the most number of paper", "variables": {}, "idx": "train_scholar_nat-479", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ) )"}
{"nl": "papers written by authors authorname0 and authorname1", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.richard_ladner", "authorname1": "fb:en.author.linda_shapiro"}, "idx": "dev_scholar_nat-0", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "When did authorname0 and authorname1 collaborate ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.ras_bodik", "authorname1": "fb:en.author.ameet_soni"}, "idx": "dev_scholar_nat-1", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "what are the collaborations of authorname0 and authorname1 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )", "can": "paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.bharath_hariharan", "authorname1": "fb:en.author.ross_girshick"}, "idx": "dev_scholar_nat-2", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string author_paper_author ) ( string = ) authorname1 ) )"}
{"nl": "who has written the most papers on keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "author that writes the most number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "dev_scholar_nat-3", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "who published the most papers in keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "author that writes the most number of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.syntactic_parsing"}, "idx": "dev_scholar_nat-4", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "number of citations of authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )", "can": "citation count of noah smith", "variables": {"authorname0": "fb:en.author.michael_i--_jordan"}, "idx": "dev_scholar_nat-5", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )"}
{"nl": "How many citations does authorname0 has ?", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )", "can": "citation count of noah smith", "variables": {"authorname0": "fb:en.author.yann_lecun"}, "idx": "dev_scholar_nat-6", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string citation_count_author_number ) ) )"}
{"nl": "what did authorname0 write ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.mark_guzdial"}, "idx": "dev_scholar_nat-7", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers where authorname0 is an author", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.ras_bodik"}, "idx": "dev_scholar_nat-8", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "show me papers by authorname0 .", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.stephen_boyd"}, "idx": "dev_scholar_nat-9", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "authorname0 's papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.srinivasan_iyer"}, "idx": "dev_scholar_nat-10", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What papers has authorname0 written ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.james_fogarty"}, "idx": "dev_scholar_nat-11", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "Papers written by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.kurtis_heimerl"}, "idx": "dev_scholar_nat-12", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.steve_seitz"}, "idx": "dev_scholar_nat-13", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What papers has authorname0 written ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )", "can": "paper that noah smith writes", "variables": {"authorname0": "fb:en.author.sharon_goldwater"}, "idx": "dev_scholar_nat-14", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What is authorname0 's latest paper ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper that noah smith writes and that has the largest publication year", "variables": {"authorname0": "fb:en.author.yejin_choi"}, "idx": "dev_scholar_nat-15", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "What is the latest paper by authorname0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper that noah smith writes and that has the largest publication year", "variables": {"authorname0": "fb:en.author.emo_todorov"}, "idx": "dev_scholar_nat-16", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "How many papers has authorname0 published ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.jeff_dean"}, "idx": "dev_scholar_nat-17", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many paper does authorname0 have ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.samia_razaq"}, "idx": "dev_scholar_nat-18", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers has authorname0 published ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.jennifer_widom"}, "idx": "dev_scholar_nat-19", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.eric_brewer"}, "idx": "dev_scholar_nat-20", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.huamin_qu"}, "idx": "dev_scholar_nat-21", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers does authorname0 have ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.srinivasan_iyer"}, "idx": "dev_scholar_nat-22", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "How many papers has authorname0 published ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )", "can": "number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.christopher_d--_manning"}, "idx": "dev_scholar_nat-23", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ) )"}
{"nl": "keyphrases used by authorname0", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.noah_smith"}, "idx": "dev_scholar_nat-24", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "What topic does authorname0 write about ?", "lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.noah_smith"}, "idx": "dev_scholar_nat-25", "canonical_lf": "( call SW.listValue ( call SW.getProperty authorname0 ( string keyphrase_author_keyphrase ) ) )"}
{"nl": "In which conferences does authorname0 typically publish ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.kaiming_he"}, "idx": "dev_scholar_nat-26", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "in what conferences does authorname0 publish ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.kaiming_he"}, "idx": "dev_scholar_nat-27", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "What conferences does authorname0 publish in ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.kurtis_heimerl"}, "idx": "dev_scholar_nat-28", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "What conference does authorname0 publish in ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.daniela_witten"}, "idx": "dev_scholar_nat-29", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "What conferences does authorname0 publish in ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.daniella_coelho"}, "idx": "dev_scholar_nat-30", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "Where did authorname0 publish in year0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.luke_clark", "year0": "2013"}, "idx": "dev_scholar_nat-31", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ) )"}
{"nl": "what papers are mostly cited by authorname0 and authorname1", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname1 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper that noah smith writes and that richard anderson writes and that has the largest citation count", "variables": {"authorname0": "fb:en.author.tom_mitchell", "authorname1": "fb:en.author.oren_etzioni"}, "idx": "dev_scholar_nat-32", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname1 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "most cited by authorname0 and authorname1", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname1 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper that noah smith writes and that richard anderson writes and that has the largest citation count", "variables": {"authorname0": "fb:en.author.tom_mitchell", "authorname1": "fb:en.author.oren_etzioni"}, "idx": "dev_scholar_nat-33", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname1 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "Which paper should I read about keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning"}, "idx": "dev_scholar_nat-34", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "What papers talk about keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.reinforcement_learning"}, "idx": "dev_scholar_nat-35", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "keyphrasename0 papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.autoencoder"}, "idx": "dev_scholar_nat-36", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "List papers that has a keyword keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.depth_map"}, "idx": "dev_scholar_nat-37", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers on keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.program_slicing"}, "idx": "dev_scholar_nat-38", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "papers on keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "dev_scholar_nat-39", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "citation count of authorname0 's papers", "lf": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string citation_count_paper_number ) ) ) )", "can": "total citation count of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.zachary_tatlock"}, "idx": "dev_scholar_nat-40", "canonical_lf": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string citation_count_paper_number ) ) ) )"}
{"nl": "papers authorname0 wrote about keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.percy_liang", "keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "dev_scholar_nat-41", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "authorname0 's papers on keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.kathryn_mckinley", "keyphrasename0": "fb:en.keyphrase.garbage_collection"}, "idx": "dev_scholar_nat-42", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What papers has authorname0 written about keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "paper that noah smith writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.percy_liang", "keyphrasename0": "fb:en.keyphrase.semantic_parsing"}, "idx": "dev_scholar_nat-43", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "papers by authorname0 from year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.emina_torlak", "year0": "2010"}, "idx": "dev_scholar_nat-44", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "Papers written by authorname0 in year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.james_fogarty", "year0": "2015"}, "idx": "dev_scholar_nat-45", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "Papers published in year0 by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.li_dong", "year0": "2016"}, "idx": "dev_scholar_nat-46", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "keyphrasename0 papers in venuename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing", "venuename0": "fb:en.venue.acl"}, "idx": "dev_scholar_nat-47", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "keyphrasename0 papers in venuename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper whose keyphrase is semantic parsing and whose venue is nature", "variables": {"keyphrasename0": "fb:en.keyphrase.tail", "venuename0": "fb:en.venue.nips"}, "idx": "dev_scholar_nat-48", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "keyphrases authorname0 used in papers written last year", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes and whose publication year is 2012", "variables": {"authorname0": "fb:en.author.emina_torlak", "year0": "2015"}, "idx": "dev_scholar_nat-49", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ) )"}
{"nl": "papers using datasetname0 or datasetname1", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) ( call SW.concat datasetname0 datasetname1 ) ) )", "can": "paper whose dataset is reviews or blogs", "variables": {"datasetname0": "fb:en.dataset.wordnet", "datasetname1": "fb:en.dataset.dbpedia"}, "idx": "dev_scholar_nat-50", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) ( call SW.concat datasetname0 datasetname1 ) ) )"}
{"nl": "author published venuename0 year0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )", "can": "author that writes paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2014", "venuename0": "fb:en.venue.acl"}, "idx": "dev_scholar_nat-51", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )"}
{"nl": "keyphrasename0 datasets", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "dataset of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.textual_entailment"}, "idx": "dev_scholar_nat-52", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "datasets in papers about keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "dataset of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.natural_language_processing"}, "idx": "dev_scholar_nat-53", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.dataset ) ( string ! type ) ) ( call SW.reverse ( string dataset_paper_dataset ) ) ( string = ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "How many papers were at venuename0 year0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2000", "venuename0": "fb:en.venue.sigmod"}, "idx": "dev_scholar_nat-54", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "How many papers were accepted at venuename0 year0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2016", "venuename0": "fb:en.venue.sigmod"}, "idx": "dev_scholar_nat-55", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "How many papers were written on keyphrasename0 in year0 ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "number of paper whose keyphrase is semantic parsing and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.question_answering", "year0": "2016"}, "idx": "dev_scholar_nat-56", "canonical_lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "What are some survey papers on keyphrasename0 problems in keyphrasename1 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )", "can": "paper whose keyphrase is semantic parsing and whose keyphrase is deep learning", "variables": {"keyphrasename0": "fb:en.keyphrase.question_answering", "keyphrasename1": "fb:en.keyphrase.natural_language_processing"}, "idx": "dev_scholar_nat-57", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )"}
{"nl": "keyphrasename1 for keyphrasename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )", "can": "paper whose keyphrase is semantic parsing and whose keyphrase is deep learning", "variables": {"keyphrasename0": "fb:en.keyphrase.natural_language_processing", "keyphrasename1": "fb:en.keyphrase.deep_learning"}, "idx": "dev_scholar_nat-58", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) )"}
{"nl": "newest keyphrasename0 papers", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning"}, "idx": "dev_scholar_nat-59", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string publication_year_paper_number ) ) )"}
{"nl": "In what years did authorname0 publish a paper ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ) )", "can": "publication year of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.pedro_domingos"}, "idx": "dev_scholar_nat-60", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ) )"}
{"nl": "In what years did authorname0 publish a paper ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ) )", "can": "publication year of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.pedro_domingos"}, "idx": "dev_scholar_nat-61", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ) )"}
{"nl": "Which papers cite authorname0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string cites_paper_author ) ( string = ) authorname0 ) )", "can": "paper that cites paper that noah smith writes", "variables": {"authorname0": "fb:en.author.daniel_jurafsky"}, "idx": "dev_scholar_nat-62", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string cites_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "What is the paper about keyphrasename0 of the most citation ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest citation count", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_image_segmentation"}, "idx": "dev_scholar_nat-63", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "Paper on keyphrasename0 with most citations", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest citation count", "variables": {"keyphrasename0": "fb:en.keyphrase.reinforcement_learning"}, "idx": "dev_scholar_nat-64", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "keyphrasename0 papers with most citations", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest citation count", "variables": {"keyphrasename0": "fb:en.keyphrase.sentiment_analysis"}, "idx": "dev_scholar_nat-65", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "most cited keyphrasename0 papers", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest citation count", "variables": {"keyphrasename0": "fb:en.keyphrase.sentiment_analysis"}, "idx": "dev_scholar_nat-66", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "most cited keyphrasename0 papers", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose keyphrase is semantic parsing and that has the largest citation count", "variables": {"keyphrasename0": "fb:en.keyphrase.parsing"}, "idx": "dev_scholar_nat-67", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "what is the most cited paper of authorname0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper that noah smith writes and that has the largest citation count", "variables": {"authorname0": "fb:en.author.ohad_shamir"}, "idx": "dev_scholar_nat-68", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "Who published the most papers in year0 at venuename0 ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )", "can": "author that writes the most number of paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2007", "venuename0": "fb:en.venue.cvpr"}, "idx": "dev_scholar_nat-69", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ) )"}
{"nl": "papers from year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose publication year is 2012", "variables": {"year0": "2014"}, "idx": "dev_scholar_nat-70", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )"}
{"nl": "papers by authorname0 published at venuename0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper that noah smith writes and whose venue is nature", "variables": {"authorname0": "fb:en.author.emina_torlak", "venuename0": "fb:en.venue.popl"}, "idx": "dev_scholar_nat-71", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "Does authorname0 publish in venuename0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper that noah smith writes and whose venue is nature", "variables": {"authorname0": "fb:en.author.ali_farhadi", "venuename0": "fb:en.venue.cvpr"}, "idx": "dev_scholar_nat-72", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "keywords shared by authorname0 and authorname1", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname1 ) ( string keyphrase_paper_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes and that richard anderson writes", "variables": {"authorname0": "fb:en.author.dan_klein", "authorname1": "fb:en.author.noah_smith"}, "idx": "dev_scholar_nat-73", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname0 ) ( call SW.reverse ( string write_author_paper ) ) ( string = ) authorname1 ) ( string keyphrase_paper_keyphrase ) ) )"}
{"nl": "who is the most cited author at venuename0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string publishin_author_venue ) ( string = ) venuename0 ) ( string max ) ( string citation_count_author_number ) ) )", "can": "author that writes paper whose venue is nature and that has the largest citation count", "variables": {"venuename0": "fb:en.venue.cvpr"}, "idx": "dev_scholar_nat-74", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string publishin_author_venue ) ( string = ) venuename0 ) ( string max ) ( string citation_count_author_number ) ) )"}
{"nl": "keyphrasename0 papers not written by authorname0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string ! = ) authorname0 ) )", "can": "paper that noah smith not writes and whose keyphrase is semantic parsing", "variables": {"authorname0": "fb:en.author.chris_dyer", "keyphrasename0": "fb:en.keyphrase.syntactic_parsing"}, "idx": "dev_scholar_nat-75", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string ! = ) authorname0 ) )"}
{"nl": "who publishes in keyphrasename0 for keyphrasename1", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string write_author_paper ) ( string = ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) ) )", "can": "author that writes paper whose keyphrase is semantic parsing and whose keyphrase is deep learning", "variables": {"keyphrasename0": "fb:en.keyphrase.deep_learning", "keyphrasename1": "fb:en.keyphrase.question_answering"}, "idx": "dev_scholar_nat-76", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string write_author_paper ) ( string = ) ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename1 ) ) )"}
{"nl": "When did authorname0 publish ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ) )", "can": "publication year of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.ameet_soni"}, "idx": "dev_scholar_nat-77", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string publication_year_paper_number ) ) )"}
{"nl": "Who cites authorname0 most ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( call SW.reverse ( string author_paper_author ) ) ) ( string cites_paper_paper ) ( string = ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) ) )", "can": "author that writes the most number of paper that cites paper that noah smith writes", "variables": {"authorname0": "fb:en.author.neeraj_jain"}, "idx": "dev_scholar_nat-78", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string author_paper_author ) ) ( call SW.filter ( call SW.getProperty ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( call SW.reverse ( string author_paper_author ) ) ) ( string cites_paper_paper ) ( string = ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) ) )"}
{"nl": "papers in venuename0 year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2016", "venuename0": "fb:en.venue.acl"}, "idx": "dev_scholar_nat-79", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )"}
{"nl": "List of papers in venuename0 year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2016", "venuename0": "fb:en.venue.vmcai"}, "idx": "dev_scholar_nat-80", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )"}
{"nl": "venuename0 papers in year0", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2016", "venuename0": "fb:en.venue.acl"}, "idx": "dev_scholar_nat-81", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )"}
{"nl": "venuename0 year0 conference", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose venue is nature and whose publication year is 2012", "variables": {"year0": "2016", "venuename0": "fb:en.venue.acm_dev"}, "idx": "dev_scholar_nat-82", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )"}
{"nl": "who publishes papers about keyphrasename0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ) )", "can": "author that writes paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.sensor_fusion"}, "idx": "dev_scholar_nat-83", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ) )"}
{"nl": "What conferences does authorname0 publish in the most ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue_paper_venue ) ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) )", "can": "venue that is venue of the most number of paper that noah smith writes", "variables": {"authorname0": "fb:en.author.noah_a--_smith"}, "idx": "dev_scholar_nat-84", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string venue_paper_venue ) ) ( call SW.getProperty authorname0 ( call SW.reverse ( string author_paper_author ) ) ) ) )"}
{"nl": "keyphrasename0 year0 papers", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) )", "can": "paper whose keyphrase is semantic parsing and whose publication year is 2012", "variables": {"keyphrasename0": "fb:en.keyphrase.semantic_parsing", "year0": "2016"}, "idx": "dev_scholar_nat-85", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "who authored papers at venuename0 ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ) )", "can": "author that writes paper whose venue is nature", "variables": {"venuename0": "fb:en.venue.nips"}, "idx": "dev_scholar_nat-86", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ) )"}
{"nl": "When was keyphrasename0 proposed ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string min ) ( string publication_year_paper_number ) ) ( string publication_year_paper_number ) ) )", "can": "publication year of paper whose keyphrase is semantic parsing and that has the smallest publication year", "variables": {"keyphrasename0": "fb:en.keyphrase.recurrent_neural_network"}, "idx": "dev_scholar_nat-87", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string min ) ( string publication_year_paper_number ) ) ( string publication_year_paper_number ) ) )"}
{"nl": "papers moatly cited by keyphrasename0 papers", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites_paper_paper ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )", "can": "paper that the most number of paper whose keyphrase is semantic parsing cites", "variables": {"keyphrasename0": "fb:en.keyphrase.parsing"}, "idx": "dev_scholar_nat-88", "canonical_lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string max ) ( call SW.reverse ( string cites_paper_paper ) ) ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ) )"}
{"nl": "What was the conference name that approved keyphrasename0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string keyphrase_venue_keyphrase ) ( string = ) keyphrasename0 ) )", "can": "venue of paper whose keyphrase is semantic parsing", "variables": {"keyphrasename0": "fb:en.keyphrase.trophic_cascade"}, "idx": "dev_scholar_nat-89", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.venue ) ( string ! type ) ) ( string keyphrase_venue_keyphrase ) ( string = ) keyphrasename0 ) )"}
{"nl": "who wrote papers in year0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )", "can": "author that writes paper whose publication year is 2012", "variables": {"year0": "2015"}, "idx": "dev_scholar_nat-90", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string author_paper_author ) ) )"}
{"nl": "main topics of work by authorname0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string citation_count_paper_number ) ) ( string keyphrase_paper_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes and that has the largest citation count", "variables": {"authorname0": "fb:en.author.brian_derenzi"}, "idx": "dev_scholar_nat-91", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string citation_count_paper_number ) ) ( string keyphrase_paper_keyphrase ) ) )"}
{"nl": "What is the most popular paper this year in venuename0 ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string max ) ( string citation_count_paper_number ) ) )", "can": "paper whose venue is nature and whose publication year is 2012 and that has the largest citation count", "variables": {"year0": "2016", "venuename0": "fb:en.venue.cvpr"}, "idx": "dev_scholar_nat-92", "canonical_lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string publication_year_paper_number ) ( string = ) ( year0 ) ) ( string max ) ( string citation_count_paper_number ) ) )"}
{"nl": "authors working on datasetname0", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ( string author_paper_author ) ) )", "can": "author that writes paper whose dataset is reviews", "variables": {"datasetname0": "fb:en.dataset.imagenet"}, "idx": "dev_scholar_nat-93", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string dataset_paper_dataset ) ( string = ) datasetname0 ) ( string author_paper_author ) ) )"}
{"nl": "What articles have been published since year0 about title0 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string title_paper_title ) ( string = ) title0 ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) )", "can": "paper whose title is neural attention and whose publication year is larger than 2012", "variables": {"title0": "fb:en.title.neural_machine_translation_by_jointly_learning_to_align_and_translate", "year0": "2010"}, "idx": "dev_scholar_nat-94", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string title_paper_title ) ( string = ) title0 ) ( string publication_year_paper_number ) ( string > ) ( year0 ) ) )"}
{"nl": "authorname0 's keyphrasename0 venuename0 paper", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) )", "can": "paper that noah smith writes and whose keyphrase is semantic parsing and whose venue is nature", "variables": {"authorname0": "fb:en.author.eric_c--_kerrigan", "keyphrasename0": "fb:en.keyphrase.liquid", "venuename0": "fb:en.venue.automatica"}, "idx": "dev_scholar_nat-95", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string keyphrase_paper_keyphrase ) ( string = ) keyphrasename0 ) ( string author_paper_author ) ( string = ) authorname0 ) )"}
{"nl": "Where did authorname0 publish his last paper ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) ( string venue_paper_venue ) ) )", "can": "venue of paper that noah smith writes and that has the largest publication year", "variables": {"authorname0": "fb:en.author.sergey_levine"}, "idx": "dev_scholar_nat-96", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string max ) ( string publication_year_paper_number ) ) ( string venue_paper_venue ) ) )"}
{"nl": "Who has published both in venuename0 and venuename1 ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string publishin_author_venue ) ( string = ) venuename0 ) ( string publishin_author_venue ) ( string = ) venuename1 ) )", "can": "author that writes paper whose venue is nature and that writes paper whose venue is acl", "variables": {"venuename0": "fb:en.venue.icml", "venuename1": "fb:en.venue.acl"}, "idx": "dev_scholar_nat-97", "canonical_lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.author ) ( string ! type ) ) ( string publishin_author_venue ) ( string = ) venuename0 ) ( string publishin_author_venue ) ( string = ) venuename1 ) )"}
{"nl": "keyphrases used by authorname0 in his venuename0 papers", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string author_paper_author ) ( string = ) authorname0 ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string keyphrase_paper_keyphrase ) ) )", "can": "keyphrase of paper that noah smith writes and whose venue is nature", "variables": {"authorname0": "fb:en.author.dan_klein", "venuename0": "fb:en.venue.emnlp"}, "idx": "dev_scholar_nat-98", "canonical_lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.paper ) ( string ! type ) ) ( string venue_paper_venue ) ( string = ) venuename0 ) ( string author_paper_author ) ( string = ) authorname0 ) ( string keyphrase_paper_keyphrase ) ) )"}
