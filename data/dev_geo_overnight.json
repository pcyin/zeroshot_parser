{"nl": "what state not traversed by the _river_ contains the most mountains ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string traverse_river_state ) ) ( string ! = ) _river_ ) ( string max ) ( call SW.reverse ( string loc_mountain_state ) ) ( call SW.getProperty ( call SW.singleton fb:en.mountain ) ( string ! type ) ) ) )", "can": "state that colorado river not traverses and that the most number of mountain is contained by", "variables": {}}
{"nl": "what state does the _river_ not traverse and contains the most cities ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string traverse_river_state ) ) ( string ! = ) _river_ ) ( string max ) ( call SW.reverse ( string loc_city_state ) ) ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ) )", "can": "state that colorado river not traverses and that the most number of city is contained by", "variables": {}}
{"nl": "what state does not contain _lake_ and has _state_ 's low point ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_lake_state ) ) ( string ! = ) _lake_ ) ( string low_point_state_place ) ( string = ) ( call SW.getProperty _state_ ( string low_point_state_place ) ) ) )", "can": "state that lake tahoe not is contained by and whose low point is low point of california", "variables": {}}
{"nl": "what state has a low point other than _place_ and contains the fewest montains ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string low_point_state_place ) ( string ! = ) _place_ ) ( string min ) ( call SW.reverse ( string loc_mountain_state ) ) ( call SW.getProperty ( call SW.singleton fb:en.mountain ) ( string ! type ) ) ) )", "can": "state whose low point is not death valley and that the least number of mountain is contained by", "variables": {}}
{"nl": "what state does the _river_ traverse but is not contained by a place ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string traverse_river_state ) ) ( string = ) _river_ ) ( call SW.reverse ( string loc_place_state ) ) ( string ! = ) ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ) )", "can": "state that colorado river traverses and that place not is contained by", "variables": {}}
{"nl": "what places are not found within the capital of _state_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ( string loc_place_city ) ( string ! = ) ( call SW.getProperty _state_ ( string capital_state_city ) ) ) )", "can": "place that not is contained by capital of california", "variables": {}}
{"nl": "what state not within the usa has an area equal to _lake_ 's ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string loc_state_country ) ( string ! = ) fb:en.country.usa ) ( string area_state_length^2 ) ( string = ) ( call SW.getProperty _lake_ ( string area_lake_length^2 ) ) ) )", "can": "state that not is contained by usa and whose area is area of lake tahoe", "variables": {}}
{"nl": "what major city is within the fewest states ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( string major_city ) ) ( string min ) ( string loc_city_state ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "city that is major and that is contained by the least number of state", "variables": {}}
{"nl": "which state 's low point is _place_ with an area not equal to _state_ 's ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string low_point_state_place ) ( string = ) _place_ ) ( string area_state_length^2 ) ( string ! = ) ( call SW.getProperty _state_ ( string area_state_length^2 ) ) ) )", "can": "state whose low point is death valley and whose area is not area of california", "variables": {}}
{"nl": "what river - traversed city contains _place_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( call SW.reverse ( string loc_place_city ) ) ( string = ) _place_ ) ( call SW.reverse ( string traverse_river_city ) ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ) )", "can": "city that death valley is contained by and that river traverses", "variables": {}}
{"nl": "what state contains _place_ and the fewest low points of _state_ ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_place_state ) ) ( string = ) _place_ ) ( string min ) ( call SW.reverse ( string loc_place_state ) ) ( call SW.getProperty _state_ ( string low_point_state_place ) ) ) )", "can": "state that death valley is contained by and that the least number of low point of california is contained by", "variables": {}}
{"nl": "name the state which both contains and is larger than _lake_", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_lake_state ) ) ( string = ) _lake_ ) ( string area_state_length^2 ) ( string > ) ( call SW.getProperty _lake_ ( string area_lake_length^2 ) ) ) )", "can": "state that lake tahoe is contained by and whose area is larger than area of lake tahoe", "variables": {}}
{"nl": "what state 's capital is not _city_ and has an area large than _lake_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string capital_state_city ) ( string ! = ) _city_ ) ( string area_state_length^2 ) ( string > ) ( call SW.getProperty _lake_ ( string area_lake_length^2 ) ) ) )", "can": "state whose capital is not sacramento and whose area is larger than area of lake tahoe", "variables": {}}
{"nl": "what mountain is within _state_ and a state ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.mountain ) ( string ! type ) ) ( string loc_mountain_state ) ( string = ) _state_ ) ( string loc_mountain_state ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "mountain that is contained by california and that is contained by state", "variables": {}}
{"nl": "what state in the usa contains a lake ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string loc_state_country ) ( string = ) fb:en.country.usa ) ( call SW.reverse ( string loc_lake_state ) ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.lake ) ( string ! type ) ) ) )", "can": "state that is contained by usa and that lake is contained by", "variables": {}}
{"nl": "what state is _city_ not in and does not have the capital of _state_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_city_state ) ) ( string ! = ) _city_ ) ( string capital_state_city ) ( string ! = ) ( call SW.getProperty _state_ ( string capital_state_city ) ) ) )", "can": "state that sacramento not is contained by and whose capital is not capital of california", "variables": {}}
{"nl": "what lake is not within _state_ and has an area smaller than the usa ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.lake ) ( string ! type ) ) ( string loc_lake_state ) ( string ! = ) _state_ ) ( string area_lake_length^2 ) ( string < ) ( call SW.getProperty fb:en.country.usa ( string area_country_length^2 ) ) ) )", "can": "lake that not is contained by california and whose area is smaller than area of usa", "variables": {}}
{"nl": "what state bordered by the _river_ has a low point that is not a place ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string next_to_river_state ) ) ( string = ) _river_ ) ( string low_point_state_place ) ( string ! = ) ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ) )", "can": "state that colorado river borders and whose low point is not place", "variables": {}}
{"nl": "how many states have the largest areas ?", "lf": "( call SW.listValue ( call .size ( call SW.superlative ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string max ) ( string area_state_length^2 ) ) ) )", "can": "number of state that has the largest area", "variables": {}}
{"nl": "which state does the _river_ traverse but is not within a country ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string traverse_river_state ) ) ( string = ) _river_ ) ( string loc_state_country ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.country ) ( string ! type ) ) ) )", "can": "state that colorado river traverses and that is contained by country", "variables": {}}
{"nl": "what state not containing _place_ has the smallest area ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_place_state ) ) ( string ! = ) _place_ ) ( string min ) ( string area_state_length^2 ) ) )", "can": "state that death valley not is contained by and that has the smallest area", "variables": {}}
{"nl": "what state is _lake_ not in and population is larger than _state_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_lake_state ) ) ( string ! = ) _lake_ ) ( string population_state_count ) ( string > ) ( call SW.getProperty _state_ ( string population_state_count ) ) ) )", "can": "state that lake tahoe not is contained by and whose population is larger than population of california", "variables": {}}
{"nl": "what state contains _lake_ and its high point is the high point of _state_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_lake_state ) ) ( string = ) _lake_ ) ( string high_point_state_place ) ( string = ) ( call SW.getProperty _state_ ( string high_point_state_place ) ) ) )", "can": "state that lake tahoe is contained by and whose high point is high point of california", "variables": {}}
{"nl": "what state does not contain _city_ that has the smallest area ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_city_state ) ) ( string ! = ) _city_ ) ( string min ) ( string area_state_length^2 ) ) )", "can": "state that sacramento not is contained by and that has the smallest area", "variables": {}}
{"nl": "what is the elevation of the high point of _state_ ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty _state_ ( string high_point_state_place ) ) ( string elevation_place_length ) ) )", "can": "elevation of high point of california", "variables": {}}
{"nl": "what state 's low point is _place_ and does not contain _state_ 's high point ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string low_point_state_place ) ( string = ) _place_ ) ( call SW.reverse ( string loc_place_state ) ) ( string ! = ) ( call SW.getProperty _state_ ( string high_point_state_place ) ) ) )", "can": "state whose low point is death valley and that high point of california not is contained by", "variables": {}}
{"nl": "which state has a capital other than _city_ and contains the fewest mountains ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string capital_state_city ) ( string ! = ) _city_ ) ( string min ) ( call SW.reverse ( string loc_mountain_state ) ) ( call SW.getProperty ( call SW.singleton fb:en.mountain ) ( string ! type ) ) ) )", "can": "state whose capital is not sacramento and that the least number of mountain is contained by", "variables": {}}
{"nl": "what state is _city_ in with a smaller area than the usa ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_city_state ) ) ( string = ) _city_ ) ( string area_state_length^2 ) ( string = ) ( call SW.getProperty fb:en.country.usa ( string area_country_length^2 ) ) ) )", "can": "state that sacramento is contained by and whose area is area of usa", "variables": {}}
{"nl": "which is the highest point in the state of _state_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ( string loc_place_state ) ( string = ) _state_ ) ( call SW.reverse ( string high_point_state_place ) ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "place that is contained by california and that is high point of state", "variables": {}}
{"nl": "what state has a river running through , but their low point is n't _place_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string low_point_state_place ) ( string ! = ) _place_ ) ( call SW.reverse ( string traverse_river_state ) ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ) )", "can": "state whose low point is not death valley and that river traverses", "variables": {}}
{"nl": "how many states have a low point that is _place_ ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string low_point_state_place ) ( string = ) _place_ ) ) )", "can": "number of state whose low point is death valley", "variables": {}}
{"nl": "which state has a capital of _city_ with a high poin that is not _state_ 's low point ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string capital_state_city ) ( string = ) _city_ ) ( string high_point_state_place ) ( string ! = ) ( call SW.getProperty _state_ ( string low_point_state_place ) ) ) )", "can": "state whose capital is sacramento and whose high point is not low point of california", "variables": {}}
{"nl": "what place is not within _state_ is the high point of the most states ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ( string loc_place_state ) ( string ! = ) _state_ ) ( string max ) ( call SW.reverse ( string high_point_state_place ) ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "place that not is contained by california and that is high point of the most number of state", "variables": {}}
{"nl": "how many states does the _river_ not border ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string next_to_river_state ) ) ( string ! = ) _river_ ) ) )", "can": "number of state that colorado river not borders", "variables": {}}
{"nl": "what is the capital of the state that contains _lake_ ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_lake_state ) ) ( string = ) _lake_ ) ( string capital_state_city ) ) )", "can": "capital of state that lake tahoe is contained by", "variables": {}}
{"nl": "what state not traversed by the _river_ has the most other river traversing it ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string traverse_river_state ) ) ( string ! = ) _river_ ) ( string max ) ( call SW.reverse ( string traverse_river_state ) ) ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ) )", "can": "state that colorado river not traverses and that the most number of river traverses", "variables": {}}
{"nl": "what city does the _river_ traverse and contains the most places ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( call SW.reverse ( string traverse_river_city ) ) ( string = ) _river_ ) ( string max ) ( call SW.reverse ( string loc_place_city ) ) ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ) )", "can": "city that colorado river traverses and that the most number of place is contained by", "variables": {}}
{"nl": "how many capitals of the state are there ?", "lf": "( call SW.listValue ( call .size ( call SW.getProperty ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string capital_state_city ) ) ) )", "can": "number of capital of state", "variables": {}}
{"nl": "what state does the _river_ not border and has a population larger than _state_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string next_to_river_state ) ) ( string ! = ) _river_ ) ( string population_state_count ) ( string > ) ( call SW.getProperty _state_ ( string population_state_count ) ) ) )", "can": "state that colorado river not borders and whose population is larger than population of california", "variables": {}}
{"nl": "what staet containing _mountain_ has the most state borders ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_mountain_state ) ) ( string = ) _mountain_ ) ( string max ) ( call SW.reverse ( string next_to_state_state ) ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "state that mount whitney is contained by and that the most number of state borders", "variables": {}}
{"nl": "what major lake is within the most states ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.lake ) ( string ! type ) ) ( string major_lake ) ) ( string max ) ( string loc_lake_state ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "lake that is major and that is contained by the most number of state", "variables": {}}
{"nl": "what state that does not border _state_ is also not bordered by a river ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string next_to_state_state ) ) ( string ! = ) _state_ ) ( call SW.reverse ( string next_to_river_state ) ) ( string ! = ) ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ) )", "can": "state that california not borders and that river not borders", "variables": {}}
{"nl": "which state with a _place_ low point is traversed by the _river_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string traverse_river_state ) ) ( string = ) _river_ ) ( string low_point_state_place ) ( string = ) _place_ ) )", "can": "state that colorado river traverses and whose low point is death valley", "variables": {}}
{"nl": "what lake that is not within _state_ has an area smaller than _state_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.lake ) ( string ! type ) ) ( string loc_lake_state ) ( string ! = ) _state_ ) ( string area_lake_length^2 ) ( string < ) ( call SW.getProperty _state_ ( string area_state_length^2 ) ) ) )", "can": "lake that not is contained by california and whose area is smaller than area of california", "variables": {}}
{"nl": "what is the total density of a city that is not within _state_ ?", "lf": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( string loc_city_state ) ( string ! = ) _state_ ) ( string density_city_count ) ) ) )", "can": "total density of city that not is contained by california", "variables": {}}
{"nl": "what country is _state_ not in with a population smaller than _state_ 's ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.country ) ( string ! type ) ) ( call SW.reverse ( string loc_state_country ) ) ( string ! = ) _state_ ) ( string population_country_count ) ( string < ) ( call SW.getProperty _state_ ( string population_state_count ) ) ) )", "can": "country that california not is contained by and whose population is smaller than population of california", "variables": {}}
{"nl": "what city that is not within _place_ has the fewest river traverses ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( call SW.reverse ( string loc_place_city ) ) ( string ! = ) _place_ ) ( string min ) ( call SW.reverse ( string traverse_river_city ) ) ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ) )", "can": "city that death valley not is contained by and that the least number of river traverses", "variables": {}}
{"nl": "name the state that does n't have a _city_ capital and a low point other than a _state_ low point .", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string capital_state_city ) ( string ! = ) _city_ ) ( string low_point_state_place ) ( string ! = ) ( call SW.getProperty _state_ ( string low_point_state_place ) ) ) )", "can": "state whose capital is not sacramento and whose low point is not low point of california", "variables": {}}
{"nl": "what state is _place_ in but does not contain mountains ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_place_state ) ) ( string = ) _place_ ) ( call SW.reverse ( string loc_mountain_state ) ) ( string ! = ) ( call SW.getProperty ( call SW.singleton fb:en.mountain ) ( string ! type ) ) ) )", "can": "state that death valley is contained by and that mountain not is contained by", "variables": {}}
{"nl": "what state that _mountain_ is not contained by has the least number of mountains contained by it ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_mountain_state ) ) ( string ! = ) _mountain_ ) ( string min ) ( call SW.reverse ( string loc_mountain_state ) ) ( call SW.getProperty ( call SW.singleton fb:en.mountain ) ( string ! type ) ) ) )", "can": "state that mount whitney not is contained by and that the least number of mountain is contained by", "variables": {}}
{"nl": "what is the total population of a city that is not _city_ ?", "lf": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( string city_name ) ( string ! = ) _name_ ) ( string population_city_count ) ) ) )", "can": "total population of city that not is named sacramento", "variables": {}}
{"nl": "what state containing _place_ is bordered by the fewest states ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_place_state ) ) ( string = ) _place_ ) ( string min ) ( call SW.reverse ( string next_to_state_state ) ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "state that death valley is contained by and that the least number of state borders", "variables": {}}
{"nl": "what state without a _place_ high point contains _place_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_place_state ) ) ( string = ) _place_ ) ( string high_point_state_place ) ( string ! = ) _place_ ) )", "can": "state that death valley is contained by and whose high point is not death valley", "variables": {}}
{"nl": "what is the smallest state that does not border the _river_ ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string next_to_river_state ) ) ( string ! = ) _river_ ) ( string min ) ( string area_state_length^2 ) ) )", "can": "state that colorado river not borders and that has the smallest area", "variables": {}}
{"nl": "what state with a high point other than _place_ has an area different than _state_ 's ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string high_point_state_place ) ( string ! = ) _place_ ) ( string area_state_length^2 ) ( string ! = ) ( call SW.getProperty _state_ ( string area_state_length^2 ) ) ) )", "can": "state whose high point is not death valley and whose area is not area of california", "variables": {}}
{"nl": "what capital city is _place_ not contained by ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( call SW.reverse ( string loc_place_city ) ) ( string ! = ) _place_ ) ( string capital_city ) ) )", "can": "city that death valley not is contained by and that is a capital", "variables": {}}
{"nl": "what city contains _place_ and is not named name ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( call SW.reverse ( string loc_place_city ) ) ( string = ) _place_ ) ( string city_name ) ( string ! = ) ( call SW.getProperty ( call SW.singleton fb:en.name ) ( string ! type ) ) ) )", "can": "city that death valley is contained by and that not is named name", "variables": {}}
{"nl": "what mountain outside of _state_ is higher than _mountain_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.mountain ) ( string ! type ) ) ( string loc_mountain_state ) ( string ! = ) _state_ ) ( string elevation_mountain_length ) ( string > ) ( call SW.getProperty _mountain_ ( string elevation_mountain_length ) ) ) )", "can": "mountain that not is contained by california and whose elevation is larger than elevation of mount whitney", "variables": {}}
{"nl": "how many rivers do not traverse _city_ ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ( string traverse_river_city ) ( string ! = ) _city_ ) ) )", "can": "number of river that not traverses sacramento", "variables": {}}
{"nl": "what river crosses through _city_ and does not have the same length of the _river_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ( string traverse_river_city ) ( string ! = ) _city_ ) ( string len_river_length ) ( string ! = ) ( call SW.getProperty _river_ ( string len_river_length ) ) ) )", "can": "river that not traverses sacramento and whose length is not length of colorado river", "variables": {}}
{"nl": "what is a mountain within a state ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.mountain ) ( string ! type ) ) ( string loc_mountain_state ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "mountain that is contained by state", "variables": {}}
{"nl": "what state not traversed by the _river_ has an area larger than the usa ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string traverse_river_state ) ) ( string ! = ) _river_ ) ( string area_state_length^2 ) ( string > ) ( call SW.getProperty fb:en.country.usa ( string area_country_length^2 ) ) ) )", "can": "state that colorado river not traverses and whose area is larger than area of usa", "variables": {}}
{"nl": "what state containing _place_ is traversed by a river ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_place_state ) ) ( string = ) _place_ ) ( call SW.reverse ( string traverse_river_state ) ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ) )", "can": "state that death valley is contained by and that river traverses", "variables": {}}
{"nl": "what place is contained by _city_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ( string loc_place_city ) ( string = ) _city_ ) )", "can": "place that is contained by sacramento", "variables": {}}
{"nl": "what lake has the same amount of area as _lake_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.lake ) ( string ! type ) ) ( string major_lake ) ) ( string area_lake_length^2 ) ( string = ) ( call SW.getProperty _lake_ ( string area_lake_length^2 ) ) ) )", "can": "lake that is major and whose area is area of lake tahoe", "variables": {}}
{"nl": "what state is _city_ not in and contains the fewest river traverses ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_city_state ) ) ( string ! = ) _city_ ) ( string min ) ( call SW.reverse ( string traverse_river_state ) ) ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ) )", "can": "state that sacramento not is contained by and that the least number of river traverses", "variables": {}}
{"nl": "which state has a capital other than _city_ and borders the fewest states ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string capital_state_city ) ( string ! = ) _city_ ) ( string min ) ( string next_to_state_state ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "state whose capital is not sacramento and that borders the least number of state", "variables": {}}
{"nl": "what is the lowest point of the state with the smallest area ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.superlative ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string min ) ( string area_state_length^2 ) ) ( string low_point_state_place ) ) )", "can": "low point of state that has the smallest area", "variables": {}}
{"nl": "what 's the highest elevation of a place outside of _city_ ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ( string loc_place_city ) ( string ! = ) _city_ ) ( string max ) ( string elevation_place_length ) ) )", "can": "place that not is contained by sacramento and that has the largest elevation", "variables": {}}
{"nl": "what is the density of a state traversed by the _river_ ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string traverse_river_state ) ) ( string = ) _river_ ) ( string density_state_count ) ) )", "can": "density of state that colorado river traverses", "variables": {}}
{"nl": "what state that does not border _state_ has the fewest river traverses ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string next_to_state_state ) ( string ! = ) _state_ ) ( string min ) ( call SW.reverse ( string traverse_river_state ) ) ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ) )", "can": "state that not borders california and that the least number of river traverses", "variables": {}}
{"nl": "which state containing _city_ has the fewest state borders ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_city_state ) ) ( string = ) _city_ ) ( string min ) ( call SW.reverse ( string next_to_state_state ) ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "state that sacramento is contained by and that the least number of state borders", "variables": {}}
{"nl": "which state is not bordered by the _river_ and contains no cities ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string next_to_river_state ) ) ( string ! = ) _river_ ) ( call SW.reverse ( string loc_city_state ) ) ( string ! = ) ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ) )", "can": "state that colorado river not borders and that city not is contained by", "variables": {}}
{"nl": "what state not bordering the _river_ does not contain _state_ 's capital ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string next_to_river_state ) ) ( string ! = ) _river_ ) ( call SW.reverse ( string loc_city_state ) ) ( string ! = ) ( call SW.getProperty _state_ ( string capital_state_city ) ) ) )", "can": "state that colorado river not borders and that capital of california not is contained by", "variables": {}}
{"nl": "what state 's area is larger than the area of _lake_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string area_state_length^2 ) ( string > ) ( call SW.getProperty _lake_ ( string area_lake_length^2 ) ) ) )", "can": "state whose area is larger than area of lake tahoe", "variables": {}}
{"nl": "what country not containing _state_ has a population lower than _city_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.country ) ( string ! type ) ) ( call SW.reverse ( string loc_state_country ) ) ( string ! = ) _state_ ) ( string population_country_count ) ( string < ) ( call SW.getProperty _city_ ( string population_city_count ) ) ) )", "can": "country that california not is contained by and whose population is smaller than population of sacramento", "variables": {}}
{"nl": "what state - traversing river borders _state_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ( string next_to_river_state ) ( string = ) _state_ ) ( string traverse_river_state ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "river that borders california and that traverses state", "variables": {}}
{"nl": "what state containing _city_ is within a country ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_city_state ) ) ( string = ) _city_ ) ( string loc_state_country ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.country ) ( string ! type ) ) ) )", "can": "state that sacramento is contained by and that is contained by country", "variables": {}}
{"nl": "which state with _place_ in it has no city contained within ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_place_state ) ) ( string = ) _place_ ) ( call SW.reverse ( string loc_city_state ) ) ( string ! = ) ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ) )", "can": "state that death valley is contained by and that city not is contained by", "variables": {}}
{"nl": "what 's the elevation outside of _state_ ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ( string loc_place_state ) ( string ! = ) _state_ ) ( string elevation_place_length ) ) )", "can": "elevation of place that not is contained by california", "variables": {}}
{"nl": "what state does the _river_ not traverse with an area larger than _lake_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string traverse_river_state ) ) ( string ! = ) _river_ ) ( string area_state_length^2 ) ( string > ) ( call SW.getProperty _lake_ ( string area_lake_length^2 ) ) ) )", "can": "state that colorado river not traverses and whose area is larger than area of lake tahoe", "variables": {}}
{"nl": "what state contains _lake_ and also has the fewest state borders ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_lake_state ) ) ( string = ) _lake_ ) ( string min ) ( call SW.reverse ( string next_to_state_state ) ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "state that lake tahoe is contained by and that the least number of state borders", "variables": {}}
{"nl": "what state does the _river_ not border ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string next_to_river_state ) ) ( string ! = ) _river_ ) )", "can": "state that colorado river not borders", "variables": {}}
{"nl": "what state that is not within the usa does not contain the capital of _state_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string loc_state_country ) ( string ! = ) fb:en.country.usa ) ( call SW.reverse ( string loc_city_state ) ) ( string ! = ) ( call SW.getProperty _state_ ( string capital_state_city ) ) ) )", "can": "state that not is contained by usa and that capital of california not is contained by", "variables": {}}
{"nl": "what major city has no river traversals in it ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( string major_city ) ) ( call SW.reverse ( string traverse_river_city ) ) ( string ! = ) ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ) )", "can": "city that is major and that river not traverses", "variables": {}}
{"nl": "what mountain that is not in _state_ has an elevation equal to _place_ 's ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.mountain ) ( string ! type ) ) ( string loc_mountain_state ) ( string = ) _state_ ) ( string elevation_mountain_length ) ( string = ) ( call SW.getProperty _place_ ( string elevation_place_length ) ) ) )", "can": "mountain that is contained by california and whose elevation is elevation of death valley", "variables": {}}
{"nl": "what state has a lake and the lowest point of _place_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string low_point_state_place ) ( string = ) _place_ ) ( call SW.reverse ( string loc_lake_state ) ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.lake ) ( string ! type ) ) ) )", "can": "state whose low point is death valley and that lake is contained by", "variables": {}}
{"nl": "what is the total area of the state with the smallest population ?", "lf": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.superlative ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string min ) ( string population_state_count ) ) ( string area_state_length^2 ) ) ) )", "can": "total area of state that has the smallest population", "variables": {}}
{"nl": "what city that is not _city_ does not contain _state_ 's high point ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( string city_name ) ( string ! = ) _name_ ) ( call SW.reverse ( string loc_place_city ) ) ( string ! = ) ( call SW.getProperty _state_ ( string high_point_state_place ) ) ) )", "can": "city that not is named sacramento and that high point of california not is contained by", "variables": {}}
{"nl": "what state does the _river_ not traverse that contains a city ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string traverse_river_state ) ) ( string ! = ) _river_ ) ( call SW.reverse ( string loc_city_state ) ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ) )", "can": "state that colorado river not traverses and that city is contained by", "variables": {}}
{"nl": "what country with the area of _state_ contains _state_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.country ) ( string ! type ) ) ( call SW.reverse ( string loc_state_country ) ) ( string = ) _state_ ) ( string area_country_length^2 ) ( string = ) ( call SW.getProperty _state_ ( string area_state_length^2 ) ) ) )", "can": "country that california is contained by and whose area is area of california", "variables": {}}
{"nl": "what state with a low point of _place_ has a high point that is not _state_ 's low point ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string low_point_state_place ) ( string = ) _place_ ) ( string high_point_state_place ) ( string ! = ) ( call SW.getProperty _state_ ( string low_point_state_place ) ) ) )", "can": "state whose low point is death valley and whose high point is not low point of california", "variables": {}}
{"nl": "what state with a capital other than _city_ contains the high point of _state_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string capital_state_city ) ( string ! = ) _city_ ) ( call SW.reverse ( string loc_place_state ) ) ( string = ) ( call SW.getProperty _state_ ( string high_point_state_place ) ) ) )", "can": "state whose capital is not sacramento and that high point of california is contained by", "variables": {}}
{"nl": "what state bordering _state_ has the lowest population numbers ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string next_to_state_state ) ( string = ) _state_ ) ( string min ) ( string population_state_count ) ) )", "can": "state that borders california and that has the smallest population", "variables": {}}
{"nl": "what city does the _river_ not traverse with an area equal to _state_ 's ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( call SW.reverse ( string traverse_river_city ) ) ( string ! = ) _river_ ) ( string area_city_length^2 ) ( string = ) ( call SW.getProperty _state_ ( string area_state_length^2 ) ) ) )", "can": "city that colorado river not traverses and whose area is area of california", "variables": {}}
{"nl": "what state within the usa is bordered by a river ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string loc_state_country ) ( string = ) fb:en.country.usa ) ( call SW.reverse ( string next_to_river_state ) ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ) )", "can": "state that is contained by usa and that river borders", "variables": {}}
{"nl": "what place that is the low point of _state_ is within the fewest cities ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ( call SW.reverse ( string low_point_state_place ) ) ( string = ) _state_ ) ( string min ) ( string loc_place_city ) ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ) )", "can": "place that is low point of california and that is contained by the least number of city", "variables": {}}
{"nl": "what is the population count of the state which contains _lake_ ?", "lf": "( call SW.listValue ( call SW.aggregate ( string sum ) ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_lake_state ) ) ( string = ) _lake_ ) ( string population_state_count ) ) ) )", "can": "total population of state that lake tahoe is contained by", "variables": {}}
{"nl": "what state with no other state borders also does not have a _place_ high point ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string high_point_state_place ) ( string ! = ) _place_ ) ( string next_to_state_state ) ( string ! = ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "state whose high point is not death valley and that not borders state", "variables": {}}
{"nl": "what state with a low point of _place_ has a smaller population than _state_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string low_point_state_place ) ( string = ) _place_ ) ( string population_state_count ) ( string < ) ( call SW.getProperty _state_ ( string population_state_count ) ) ) )", "can": "state whose low point is death valley and whose population is smaller than population of california", "variables": {}}
{"nl": "what is the density of a state not containing _place_ ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_place_state ) ) ( string ! = ) _place_ ) ( string density_state_count ) ) )", "can": "density of state that death valley not is contained by", "variables": {}}
{"nl": "what state is _city_ in with its population equal to _city_ 's ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_city_state ) ) ( string = ) _city_ ) ( string population_state_count ) ( string = ) ( call SW.getProperty _city_ ( string population_city_count ) ) ) )", "can": "state that sacramento is contained by and whose population is population of sacramento", "variables": {}}
{"nl": "what state that borders _state_ does not have _place_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string next_to_state_state ) ( string = ) _state_ ) ( call SW.reverse ( string loc_place_state ) ) ( string ! = ) _place_ ) )", "can": "state that borders california and that death valley not is contained by", "variables": {}}
{"nl": "what state does not contain _mountain_ nor a place ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_mountain_state ) ) ( string ! = ) _mountain_ ) ( call SW.reverse ( string loc_place_state ) ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ) )", "can": "state that mount whitney not is contained by and that place is contained by", "variables": {}}
{"nl": "which cities are traversed by the _river_ and do not have a _state_ low point ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( call SW.reverse ( string traverse_river_city ) ) ( string = ) _river_ ) ( call SW.reverse ( string loc_place_city ) ) ( string ! = ) ( call SW.getProperty _state_ ( string low_point_state_place ) ) ) )", "can": "city that colorado river traverses and that low point of california not is contained by", "variables": {}}
{"nl": "what city is named _city_ that the _river_ traverses ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( string city_name ) ( string = ) _name_ ) ( call SW.reverse ( string traverse_river_city ) ) ( string = ) _river_ ) )", "can": "city that is named sacramento and that colorado river traverses", "variables": {}}
{"nl": "what city traversed by the _river_ contains the fewest places ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( call SW.reverse ( string traverse_river_city ) ) ( string = ) _river_ ) ( string min ) ( call SW.reverse ( string loc_place_city ) ) ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ) )", "can": "city that colorado river traverses and that the least number of place is contained by", "variables": {}}
{"nl": "what place is not in _state_ and has the most cities ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ( string loc_place_state ) ( string ! = ) _state_ ) ( string max ) ( string loc_place_city ) ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ) )", "can": "place that not is contained by california and that is contained by the most number of city", "variables": {}}
{"nl": "which state is _mountain_ in and its lowest point is _state_ 's highest point ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_mountain_state ) ) ( string ! = ) _mountain_ ) ( string low_point_state_place ) ( string = ) ( call SW.getProperty _state_ ( string high_point_state_place ) ) ) )", "can": "state that mount whitney not is contained by and whose low point is high point of california", "variables": {}}
{"nl": "what is a major city that is a different size than _lake_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( string major_city ) ) ( string area_city_length^2 ) ( string ! = ) ( call SW.getProperty _lake_ ( string area_lake_length^2 ) ) ) )", "can": "city that is major and whose area is not area of lake tahoe", "variables": {}}
{"nl": "what place that is not in _state_ does not contain the capital of _state_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ( string loc_place_state ) ( string ! = ) _state_ ) ( string loc_place_city ) ( string ! = ) ( call SW.getProperty _state_ ( string capital_state_city ) ) ) )", "can": "place that not is contained by california and that not is contained by capital of california", "variables": {}}
{"nl": "which state contains _city_ and has a smaller population than _city_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_city_state ) ) ( string = ) _city_ ) ( string population_state_count ) ( string < ) ( call SW.getProperty _city_ ( string population_city_count ) ) ) )", "can": "state that sacramento is contained by and whose population is smaller than population of sacramento", "variables": {}}
{"nl": "what state outside of the usa has a _place_ low point ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string loc_state_country ) ( string ! = ) fb:en.country.usa ) ( string low_point_state_place ) ( string = ) _place_ ) )", "can": "state that not is contained by usa and whose low point is death valley", "variables": {}}
{"nl": "which state has the least number of names ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( string min ) ( string city_name ) ( call SW.getProperty ( call SW.singleton fb:en.name ) ( string ! type ) ) ) )", "can": "city that is named the least number of name", "variables": {}}
{"nl": "what state has a high point of _place_ and its high point is not a place ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string high_point_state_place ) ( string = ) _place_ ) ( string high_point_state_place ) ( string ! = ) ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ) )", "can": "state whose high point is death valley and whose high point is not place", "variables": {}}
{"nl": "what is the state population of a non - _city_ capital ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string capital_state_city ) ( string ! = ) _city_ ) ( string population_state_count ) ) )", "can": "population of state whose capital is not sacramento", "variables": {}}
{"nl": "what city is _place_ not in and is the capital of the fewest states ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( call SW.reverse ( string loc_place_city ) ) ( string ! = ) _place_ ) ( string min ) ( call SW.reverse ( string capital_state_city ) ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "city that death valley not is contained by and that is capital of the least number of state", "variables": {}}
{"nl": "what state containing _mountain_ has a low point of a place ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_mountain_state ) ) ( string = ) _mountain_ ) ( string low_point_state_place ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ) )", "can": "state that mount whitney is contained by and whose low point is place", "variables": {}}
{"nl": "what state with a capital of _city_ contains the high point of _state_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string capital_state_city ) ( string = ) _city_ ) ( call SW.reverse ( string loc_place_state ) ) ( string = ) ( call SW.getProperty _state_ ( string high_point_state_place ) ) ) )", "can": "state whose capital is sacramento and that high point of california is contained by", "variables": {}}
{"nl": "what state with a low point that is not _place_ is not bordered by a river ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string low_point_state_place ) ( string ! = ) _place_ ) ( call SW.reverse ( string next_to_river_state ) ) ( string ! = ) ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ) )", "can": "state whose low point is not death valley and that river not borders", "variables": {}}
{"nl": "what state is not bordered by the _river_ and has an area smaller than the area of the usa ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string next_to_river_state ) ) ( string ! = ) _river_ ) ( string area_state_length^2 ) ( string < ) ( call SW.getProperty fb:en.country.usa ( string area_country_length^2 ) ) ) )", "can": "state that colorado river not borders and whose area is smaller than area of usa", "variables": {}}
{"nl": "what state has a high point of _place_ and is not bordered by a state ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string high_point_state_place ) ( string = ) _place_ ) ( call SW.reverse ( string next_to_state_state ) ) ( string ! = ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "state whose high point is death valley and that state not borders", "variables": {}}
{"nl": "what is the capital of a state bordering _state_ ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string next_to_state_state ) ( string = ) _state_ ) ( string capital_state_city ) ) )", "can": "capital of state that borders california", "variables": {}}
{"nl": "what state contains _mountain_ but does n't contains _city_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_mountain_state ) ) ( string = ) _mountain_ ) ( call SW.reverse ( string loc_city_state ) ) ( string ! = ) _city_ ) )", "can": "state that mount whitney is contained by and that sacramento not is contained by", "variables": {}}
{"nl": "what 's the capital city that has a smaller area than _lake_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( string capital_city ) ) ( string area_city_length^2 ) ( string < ) ( call SW.getProperty _lake_ ( string area_lake_length^2 ) ) ) )", "can": "city that is a capital and whose area is smaller than area of lake tahoe", "variables": {}}
{"nl": "what state does not have _place_ and does not have a city for a capital ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_place_state ) ) ( string ! = ) _place_ ) ( string capital_state_city ) ( string ! = ) ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ) )", "can": "state that death valley not is contained by and whose capital is not city", "variables": {}}
{"nl": "what state does the _river_ not traverse and is not within the country ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string traverse_river_state ) ) ( string ! = ) _river_ ) ( string loc_state_country ) ( string ! = ) ( call SW.getProperty ( call SW.singleton fb:en.country ) ( string ! type ) ) ) )", "can": "state that colorado river not traverses and that not is contained by country", "variables": {}}
{"nl": "what state has a high point other than _place_ and contains the most low points of _state_ ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string high_point_state_place ) ( string ! = ) _place_ ) ( string max ) ( call SW.reverse ( string loc_place_state ) ) ( call SW.getProperty _state_ ( string low_point_state_place ) ) ) )", "can": "state whose high point is not death valley and that the most number of low point of california is contained by", "variables": {}}
{"nl": "what place is the low point of a state ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ( call SW.reverse ( string low_point_state_place ) ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "place that is low point of state", "variables": {}}
{"nl": "what is the area of a lake ?", "lf": "( call SW.listValue ( call SW.getProperty ( call SW.getProperty ( call SW.singleton fb:en.lake ) ( string ! type ) ) ( string area_lake_length^2 ) ) )", "can": "area of lake", "variables": {}}
{"nl": "what river traverses _state_ but not any cities ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ( string traverse_river_state ) ( string = ) _state_ ) ( string traverse_river_city ) ( string ! = ) ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ) )", "can": "river that traverses california and that not traverses city", "variables": {}}
{"nl": "whcih state 's high point is _place_ that is not within a country ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string high_point_state_place ) ( string = ) _place_ ) ( string loc_state_country ) ( string ! = ) ( call SW.getProperty ( call SW.singleton fb:en.country ) ( string ! type ) ) ) )", "can": "state whose high point is death valley and that not is contained by country", "variables": {}}
{"nl": "what states border _state_ and have the most river borders ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string next_to_state_state ) ( string = ) _state_ ) ( string max ) ( call SW.reverse ( string next_to_river_state ) ) ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ) )", "can": "state that borders california and that the most number of river borders", "variables": {}}
{"nl": "what city not traversed by the _river_ contains the fewest places ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( call SW.reverse ( string traverse_river_city ) ) ( string ! = ) _river_ ) ( string min ) ( call SW.reverse ( string loc_place_city ) ) ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ) )", "can": "city that colorado river not traverses and that the least number of place is contained by", "variables": {}}
{"nl": "what state is _lake_ in and is contained by the low point of _state_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_lake_state ) ) ( string = ) _lake_ ) ( call SW.reverse ( string loc_place_state ) ) ( string = ) ( call SW.getProperty _state_ ( string low_point_state_place ) ) ) )", "can": "state that lake tahoe is contained by and that low point of california is contained by", "variables": {}}
{"nl": "what mountain that is not in _state_ has an elevation lower than _place_ 's ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.mountain ) ( string ! type ) ) ( string loc_mountain_state ) ( string ! = ) _state_ ) ( string elevation_mountain_length ) ( string < ) ( call SW.getProperty _place_ ( string elevation_place_length ) ) ) )", "can": "mountain that not is contained by california and whose elevation is smaller than elevation of death valley", "variables": {}}
{"nl": "what major river traverses _city_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ( string traverse_river_city ) ( string = ) _city_ ) ( string major_river ) ) )", "can": "river that traverses sacramento and that is major", "variables": {}}
{"nl": "how many cities are named _city_ ?", "lf": "( call SW.listValue ( call .size ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( string city_name ) ( string = ) _name_ ) ) )", "can": "number of city that is named sacramento", "variables": {}}
{"nl": "what state with a low point of _place_ does not have the same low point as _state_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string low_point_state_place ) ( string = ) _place_ ) ( string low_point_state_place ) ( string ! = ) ( call SW.getProperty _state_ ( string low_point_state_place ) ) ) )", "can": "state whose low point is death valley and whose low point is not low point of california", "variables": {}}
{"nl": "what river does not traverse _city_ and has a longer length than the _river_ ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ( string traverse_river_city ) ( string ! = ) _city_ ) ( string len_river_length ) ( string > ) ( call SW.getProperty _river_ ( string len_river_length ) ) ) )", "can": "river that not traverses sacramento and whose length is larger than length of colorado river", "variables": {}}
{"nl": "what place is the high point of _state_ with an elevation larger than _place_ 's ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ( call SW.reverse ( string high_point_state_place ) ) ( string = ) _state_ ) ( string elevation_place_length ) ( string > ) ( call SW.getProperty _place_ ( string elevation_place_length ) ) ) )", "can": "place that is high point of california and whose elevation is larger than elevation of death valley", "variables": {}}
{"nl": "what state containing _mountain_ is within the fewest countries ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_mountain_state ) ) ( string = ) _mountain_ ) ( string min ) ( string loc_state_country ) ( call SW.getProperty ( call SW.singleton fb:en.country ) ( string ! type ) ) ) )", "can": "state that mount whitney is contained by and that is contained by the least number of country", "variables": {}}
{"nl": "what state is _place_ not in and contains the fewest places ?", "lf": "( call SW.listValue ( call SW.countSuperlative ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_place_state ) ) ( string = ) _place_ ) ( string min ) ( call SW.reverse ( string loc_place_state ) ) ( call SW.getProperty ( call SW.singleton fb:en.place ) ( string ! type ) ) ) )", "can": "state that death valley is contained by and that the least number of place is contained by", "variables": {}}
{"nl": "which state is _lake_ in with rivers traversing it ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_lake_state ) ) ( string = ) _lake_ ) ( call SW.reverse ( string traverse_river_state ) ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.river ) ( string ! type ) ) ) )", "can": "state that lake tahoe is contained by and that river traverses", "variables": {}}
{"nl": "what state does n't have _place_ contained within and has _state_ as its high point ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string loc_place_state ) ) ( string ! = ) _place_ ) ( string high_point_state_place ) ( string = ) ( call SW.getProperty _state_ ( string high_point_state_place ) ) ) )", "can": "state that death valley not is contained by and whose high point is high point of california", "variables": {}}
{"nl": "what country has the smallest area ?", "lf": "( call SW.listValue ( call SW.superlative ( call SW.getProperty ( call SW.singleton fb:en.country ) ( string ! type ) ) ( string min ) ( string area_country_length^2 ) ) )", "can": "country that has the smallest area", "variables": {}}
{"nl": "which state that does n't border _state_ has its capital in _city_ .", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( string next_to_state_state ) ( string ! = ) _state_ ) ( string capital_state_city ) ( string = ) _city_ ) )", "can": "state that not borders california and whose capital is sacramento", "variables": {}}
{"nl": "what city that is not within _state_ is within a state ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( string loc_city_state ) ( string ! = ) _state_ ) ( string loc_city_state ) ( string = ) ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ) )", "can": "city that not is contained by california and that is contained by state", "variables": {}}
{"nl": "what 's the state bordered by the _river_ that has a capital other than the _state_ capital ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.state ) ( string ! type ) ) ( call SW.reverse ( string next_to_river_state ) ) ( string = ) _river_ ) ( string capital_state_city ) ( string ! = ) ( call SW.getProperty _state_ ( string capital_state_city ) ) ) )", "can": "state that colorado river borders and whose capital is not capital of california", "variables": {}}
{"nl": "what city is the capital of _state_ with a population equal to that of _city_ 's ?", "lf": "( call SW.listValue ( call SW.filter ( call SW.filter ( call SW.getProperty ( call SW.singleton fb:en.city ) ( string ! type ) ) ( call SW.reverse ( string capital_state_city ) ) ( string = ) _state_ ) ( string population_city_count ) ( string < ) ( call SW.getProperty _city_ ( string population_city_count ) ) ) )", "can": "city that is capital of california and whose population is smaller than population of sacramento", "variables": {}}
